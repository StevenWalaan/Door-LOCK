
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  000032f6  0000338a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080010a  0080010a  00003434  2**0
                  ALLOC
  3 .stab         00002be0  00000000  00000000  00003434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118d  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000071a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000072e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b121  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <main>
      8a:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <openCallBackFunction>:
status state;

uint8 wait_flag=0;

void openCallBackFunction(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*STATIC BEC IT USED ONLY IN THIS SCOPE*/
	static uint8 open_tick=0;
	open_tick++;
     b5a:	80 91 0b 01 	lds	r24, 0x010B
     b5e:	8f 5f       	subi	r24, 0xFF	; 255
     b60:	80 93 0b 01 	sts	0x010B, r24
	if(open_tick==1){
     b64:	80 91 0b 01 	lds	r24, 0x010B
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	59 f5       	brne	.+86     	; 0xbc2 <openCallBackFunction+0x7c>
		LCD_clearScreen();
     b6c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
		LCD_displayString("Door unlocking");
     b70:	80 e6       	ldi	r24, 0x60	; 96
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>

		Timer1_ConfigType Timer1_Configurations1= {0,23438,F_CPU_1024,COMPARE_MODE};
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	98 87       	std	Y+8, r25	; 0x08
     b7e:	8f 83       	std	Y+7, r24	; 0x07
     b80:	ec ee       	ldi	r30, 0xEC	; 236
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	fa 87       	std	Y+10, r31	; 0x0a
     b86:	e9 87       	std	Y+9, r30	; 0x09
     b88:	f6 e0       	ldi	r31, 0x06	; 6
     b8a:	fb 87       	std	Y+11, r31	; 0x0b
     b8c:	e9 85       	ldd	r30, Y+9	; 0x09
     b8e:	fa 85       	ldd	r31, Y+10	; 0x0a
     b90:	00 80       	ld	r0, Z
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9a 87       	std	Y+10, r25	; 0x0a
     b9a:	89 87       	std	Y+9, r24	; 0x09
     b9c:	ef 81       	ldd	r30, Y+7	; 0x07
     b9e:	f8 85       	ldd	r31, Y+8	; 0x08
     ba0:	00 82       	st	Z, r0
     ba2:	8f 81       	ldd	r24, Y+7	; 0x07
     ba4:	98 85       	ldd	r25, Y+8	; 0x08
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	98 87       	std	Y+8, r25	; 0x08
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	9b 85       	ldd	r25, Y+11	; 0x0b
     bae:	91 50       	subi	r25, 0x01	; 1
     bb0:	9b 87       	std	Y+11, r25	; 0x0b
     bb2:	eb 85       	ldd	r30, Y+11	; 0x0b
     bb4:	ee 23       	and	r30, r30
     bb6:	51 f7       	brne	.-44     	; 0xb8c <openCallBackFunction+0x46>
		Timer1_init(&Timer1_Configurations1);
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Timer1_init>
     bc0:	20 c0       	rjmp	.+64     	; 0xc02 <openCallBackFunction+0xbc>
	}
	else if(open_tick==6){
     bc2:	80 91 0b 01 	lds	r24, 0x010B
     bc6:	86 30       	cpi	r24, 0x06	; 6
     bc8:	39 f4       	brne	.+14     	; 0xbd8 <openCallBackFunction+0x92>
		LCD_clearScreen();
     bca:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
		LCD_displayString("Door is open");
     bce:	8f e6       	ldi	r24, 0x6F	; 111
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
     bd6:	15 c0       	rjmp	.+42     	; 0xc02 <openCallBackFunction+0xbc>
	}
	else if(open_tick==7){
     bd8:	80 91 0b 01 	lds	r24, 0x010B
     bdc:	87 30       	cpi	r24, 0x07	; 7
     bde:	39 f4       	brne	.+14     	; 0xbee <openCallBackFunction+0xa8>
		LCD_clearScreen();
     be0:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
		LCD_displayString("Door locking");
     be4:	8c e7       	ldi	r24, 0x7C	; 124
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
     bec:	0a c0       	rjmp	.+20     	; 0xc02 <openCallBackFunction+0xbc>
	}
	else if(open_tick==12){
     bee:	80 91 0b 01 	lds	r24, 0x010B
     bf2:	8c 30       	cpi	r24, 0x0C	; 12
     bf4:	31 f4       	brne	.+12     	; 0xc02 <openCallBackFunction+0xbc>
		open_tick=0;
     bf6:	10 92 0b 01 	sts	0x010B, r1
		wait_flag=0;
     bfa:	10 92 0a 01 	sts	0x010A, r1
		Timer1_deInit(); /*STOPS THE TIMER*/
     bfe:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Timer1_deInit>
	}
}
     c02:	2b 96       	adiw	r28, 0x0b	; 11
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <warnCallBackFunction>:

void warnCallBackFunction(void)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	2b 97       	sbiw	r28, 0x0b	; 11
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
	/*STATIC BEC IT USED ONLY IN THIS SCOPE*/
	static uint8 warn_tick=0;
	warn_tick++;
     c28:	80 91 0c 01 	lds	r24, 0x010C
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	80 93 0c 01 	sts	0x010C, r24
	if(warn_tick==1)
     c32:	80 91 0c 01 	lds	r24, 0x010C
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	51 f5       	brne	.+84     	; 0xc8e <warnCallBackFunction+0x7a>
	{
		LCD_clearScreen();
     c3a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
		LCD_displayString("Error");
     c3e:	89 e8       	ldi	r24, 0x89	; 137
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
		Timer1_ConfigType Timer1_Configurations2= {0,39063,F_CPU_1024,COMPARE_MODE};
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	98 87       	std	Y+8, r25	; 0x08
     c4c:	8f 83       	std	Y+7, r24	; 0x07
     c4e:	e2 ef       	ldi	r30, 0xF2	; 242
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	fa 87       	std	Y+10, r31	; 0x0a
     c54:	e9 87       	std	Y+9, r30	; 0x09
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	fb 87       	std	Y+11, r31	; 0x0b
     c5a:	e9 85       	ldd	r30, Y+9	; 0x09
     c5c:	fa 85       	ldd	r31, Y+10	; 0x0a
     c5e:	00 80       	ld	r0, Z
     c60:	89 85       	ldd	r24, Y+9	; 0x09
     c62:	9a 85       	ldd	r25, Y+10	; 0x0a
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	9a 87       	std	Y+10, r25	; 0x0a
     c68:	89 87       	std	Y+9, r24	; 0x09
     c6a:	ef 81       	ldd	r30, Y+7	; 0x07
     c6c:	f8 85       	ldd	r31, Y+8	; 0x08
     c6e:	00 82       	st	Z, r0
     c70:	8f 81       	ldd	r24, Y+7	; 0x07
     c72:	98 85       	ldd	r25, Y+8	; 0x08
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	98 87       	std	Y+8, r25	; 0x08
     c78:	8f 83       	std	Y+7, r24	; 0x07
     c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	9b 87       	std	Y+11, r25	; 0x0b
     c80:	eb 85       	ldd	r30, Y+11	; 0x0b
     c82:	ee 23       	and	r30, r30
     c84:	51 f7       	brne	.-44     	; 0xc5a <warnCallBackFunction+0x46>
		Timer1_init(&Timer1_Configurations2);
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Timer1_init>
	}
	if(warn_tick==12)
     c8e:	80 91 0c 01 	lds	r24, 0x010C
     c92:	8c 30       	cpi	r24, 0x0C	; 12
     c94:	31 f4       	brne	.+12     	; 0xca2 <warnCallBackFunction+0x8e>
	{
		warn_tick=0;
     c96:	10 92 0c 01 	sts	0x010C, r1
		wait_flag=0;
     c9a:	10 92 0a 01 	sts	0x010A, r1
		Timer1_deInit();
     c9e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Timer1_deInit>
	}


}
     ca2:	2b 96       	adiw	r28, 0x0b	; 11
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <main>:

int main(void)
{
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	c4 59       	subi	r28, 0x94	; 148
     cc2:	d0 40       	sbci	r29, 0x00	; 0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5],repass[5]; /*FOR PASSWORD*/
	uint8 option; /* FOR THE OPTIONS (OPEN DOOR OR CHANGE PASS)*/

	/*enable interrupt*/
	SREG|=(1<<7);
     cce:	af e5       	ldi	r26, 0x5F	; 95
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ef e5       	ldi	r30, 0x5F	; 95
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	8c 93       	st	X, r24



	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Configurations = {BIT_8,NO_PARITY,BIT_1,9600};
     cdc:	ce 01       	movw	r24, r28
     cde:	8d 58       	subi	r24, 0x8D	; 141
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	ca 57       	subi	r28, 0x7A	; 122
     ce4:	df 4f       	sbci	r29, 0xFF	; 255
     ce6:	99 83       	std	Y+1, r25	; 0x01
     ce8:	88 83       	st	Y, r24
     cea:	c6 58       	subi	r28, 0x86	; 134
     cec:	d0 40       	sbci	r29, 0x00	; 0
     cee:	24 e0       	ldi	r18, 0x04	; 4
     cf0:	31 e0       	ldi	r19, 0x01	; 1
     cf2:	c8 57       	subi	r28, 0x78	; 120
     cf4:	df 4f       	sbci	r29, 0xFF	; 255
     cf6:	39 83       	std	Y+1, r19	; 0x01
     cf8:	28 83       	st	Y, r18
     cfa:	c8 58       	subi	r28, 0x88	; 136
     cfc:	d0 40       	sbci	r29, 0x00	; 0
     cfe:	35 e0       	ldi	r19, 0x05	; 5
     d00:	c6 57       	subi	r28, 0x76	; 118
     d02:	df 4f       	sbci	r29, 0xFF	; 255
     d04:	38 83       	st	Y, r19
     d06:	ca 58       	subi	r28, 0x8A	; 138
     d08:	d0 40       	sbci	r29, 0x00	; 0
     d0a:	c8 57       	subi	r28, 0x78	; 120
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	e8 81       	ld	r30, Y
     d10:	f9 81       	ldd	r31, Y+1	; 0x01
     d12:	c8 58       	subi	r28, 0x88	; 136
     d14:	d0 40       	sbci	r29, 0x00	; 0
     d16:	00 80       	ld	r0, Z
     d18:	c8 57       	subi	r28, 0x78	; 120
     d1a:	df 4f       	sbci	r29, 0xFF	; 255
     d1c:	28 81       	ld	r18, Y
     d1e:	39 81       	ldd	r19, Y+1	; 0x01
     d20:	c8 58       	subi	r28, 0x88	; 136
     d22:	d0 40       	sbci	r29, 0x00	; 0
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	c8 57       	subi	r28, 0x78	; 120
     d2a:	df 4f       	sbci	r29, 0xFF	; 255
     d2c:	39 83       	std	Y+1, r19	; 0x01
     d2e:	28 83       	st	Y, r18
     d30:	c8 58       	subi	r28, 0x88	; 136
     d32:	d0 40       	sbci	r29, 0x00	; 0
     d34:	ca 57       	subi	r28, 0x7A	; 122
     d36:	df 4f       	sbci	r29, 0xFF	; 255
     d38:	e8 81       	ld	r30, Y
     d3a:	f9 81       	ldd	r31, Y+1	; 0x01
     d3c:	c6 58       	subi	r28, 0x86	; 134
     d3e:	d0 40       	sbci	r29, 0x00	; 0
     d40:	00 82       	st	Z, r0
     d42:	ca 57       	subi	r28, 0x7A	; 122
     d44:	df 4f       	sbci	r29, 0xFF	; 255
     d46:	28 81       	ld	r18, Y
     d48:	39 81       	ldd	r19, Y+1	; 0x01
     d4a:	c6 58       	subi	r28, 0x86	; 134
     d4c:	d0 40       	sbci	r29, 0x00	; 0
     d4e:	2f 5f       	subi	r18, 0xFF	; 255
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	ca 57       	subi	r28, 0x7A	; 122
     d54:	df 4f       	sbci	r29, 0xFF	; 255
     d56:	39 83       	std	Y+1, r19	; 0x01
     d58:	28 83       	st	Y, r18
     d5a:	c6 58       	subi	r28, 0x86	; 134
     d5c:	d0 40       	sbci	r29, 0x00	; 0
     d5e:	c6 57       	subi	r28, 0x76	; 118
     d60:	df 4f       	sbci	r29, 0xFF	; 255
     d62:	38 81       	ld	r19, Y
     d64:	ca 58       	subi	r28, 0x8A	; 138
     d66:	d0 40       	sbci	r29, 0x00	; 0
     d68:	31 50       	subi	r19, 0x01	; 1
     d6a:	c6 57       	subi	r28, 0x76	; 118
     d6c:	df 4f       	sbci	r29, 0xFF	; 255
     d6e:	38 83       	st	Y, r19
     d70:	ca 58       	subi	r28, 0x8A	; 138
     d72:	d0 40       	sbci	r29, 0x00	; 0
     d74:	c6 57       	subi	r28, 0x76	; 118
     d76:	df 4f       	sbci	r29, 0xFF	; 255
     d78:	88 81       	ld	r24, Y
     d7a:	ca 58       	subi	r28, 0x8A	; 138
     d7c:	d0 40       	sbci	r29, 0x00	; 0
     d7e:	88 23       	and	r24, r24
     d80:	21 f6       	brne	.-120    	; 0xd0a <main+0x56>


	UART_init(&UART_Configurations);
     d82:	ce 01       	movw	r24, r28
     d84:	8d 58       	subi	r24, 0x8D	; 141
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <UART_init>

	LCD_init();
     d8c:	0e 94 9c 12 	call	0x2538	; 0x2538 <LCD_init>
	while(1)
	{
		/*MC1 WAITING TILL MC2 COMMUNICATE WITH IT TO RECIVE THE STATE*/

		while(UART_recieveByte()!= MC2_ASK_MC1);
     d90:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	e1 f7       	brne	.-8      	; 0xd90 <main+0xdc>
		UART_sendByte(MC1_ANS_MC2);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
		state=UART_recieveByte();
     d9e:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
     da2:	80 93 0f 01 	sts	0x010F, r24

		switch(state)
     da6:	80 91 0f 01 	lds	r24, 0x010F
     daa:	e8 2f       	mov	r30, r24
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	cc 57       	subi	r28, 0x7C	; 124
     db0:	df 4f       	sbci	r29, 0xFF	; 255
     db2:	f9 83       	std	Y+1, r31	; 0x01
     db4:	e8 83       	st	Y, r30
     db6:	c4 58       	subi	r28, 0x84	; 132
     db8:	d0 40       	sbci	r29, 0x00	; 0
     dba:	cc 57       	subi	r28, 0x7C	; 124
     dbc:	df 4f       	sbci	r29, 0xFF	; 255
     dbe:	28 81       	ld	r18, Y
     dc0:	39 81       	ldd	r19, Y+1	; 0x01
     dc2:	c4 58       	subi	r28, 0x84	; 132
     dc4:	d0 40       	sbci	r29, 0x00	; 0
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <main+0x11a>
     dcc:	2d c5       	rjmp	.+2650   	; 0x1828 <main+0xb74>
     dce:	cc 57       	subi	r28, 0x7C	; 124
     dd0:	df 4f       	sbci	r29, 0xFF	; 255
     dd2:	88 81       	ld	r24, Y
     dd4:	99 81       	ldd	r25, Y+1	; 0x01
     dd6:	c4 58       	subi	r28, 0x84	; 132
     dd8:	d0 40       	sbci	r29, 0x00	; 0
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	91 05       	cpc	r25, r1
     dde:	9c f4       	brge	.+38     	; 0xe06 <main+0x152>
     de0:	cc 57       	subi	r28, 0x7C	; 124
     de2:	df 4f       	sbci	r29, 0xFF	; 255
     de4:	e8 81       	ld	r30, Y
     de6:	f9 81       	ldd	r31, Y+1	; 0x01
     de8:	c4 58       	subi	r28, 0x84	; 132
     dea:	d0 40       	sbci	r29, 0x00	; 0
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	51 f1       	breq	.+84     	; 0xe44 <main+0x190>
     df0:	cc 57       	subi	r28, 0x7C	; 124
     df2:	df 4f       	sbci	r29, 0xFF	; 255
     df4:	28 81       	ld	r18, Y
     df6:	39 81       	ldd	r19, Y+1	; 0x01
     df8:	c4 58       	subi	r28, 0x84	; 132
     dfa:	d0 40       	sbci	r29, 0x00	; 0
     dfc:	21 30       	cpi	r18, 0x01	; 1
     dfe:	31 05       	cpc	r19, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <main+0x150>
     e02:	2d c3       	rjmp	.+1626   	; 0x145e <main+0x7aa>
     e04:	c5 cf       	rjmp	.-118    	; 0xd90 <main+0xdc>
     e06:	cc 57       	subi	r28, 0x7C	; 124
     e08:	df 4f       	sbci	r29, 0xFF	; 255
     e0a:	88 81       	ld	r24, Y
     e0c:	99 81       	ldd	r25, Y+1	; 0x01
     e0e:	c4 58       	subi	r28, 0x84	; 132
     e10:	d0 40       	sbci	r29, 0x00	; 0
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <main+0x166>
     e18:	6e c5       	rjmp	.+2780   	; 0x18f6 <main+0xc42>
     e1a:	cc 57       	subi	r28, 0x7C	; 124
     e1c:	df 4f       	sbci	r29, 0xFF	; 255
     e1e:	e8 81       	ld	r30, Y
     e20:	f9 81       	ldd	r31, Y+1	; 0x01
     e22:	c4 58       	subi	r28, 0x84	; 132
     e24:	d0 40       	sbci	r29, 0x00	; 0
     e26:	e4 30       	cpi	r30, 0x04	; 4
     e28:	f1 05       	cpc	r31, r1
     e2a:	0c f4       	brge	.+2      	; 0xe2e <main+0x17a>
     e2c:	b8 c3       	rjmp	.+1904   	; 0x159e <main+0x8ea>
     e2e:	cc 57       	subi	r28, 0x7C	; 124
     e30:	df 4f       	sbci	r29, 0xFF	; 255
     e32:	28 81       	ld	r18, Y
     e34:	39 81       	ldd	r19, Y+1	; 0x01
     e36:	c4 58       	subi	r28, 0x84	; 132
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	25 30       	cpi	r18, 0x05	; 5
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <main+0x18e>
     e40:	ae c3       	rjmp	.+1884   	; 0x159e <main+0x8ea>
     e42:	a6 cf       	rjmp	.-180    	; 0xd90 <main+0xdc>
		{

		case create_pass:

			LCD_clearScreen();
     e44:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
			LCD_displayString("plz enter pass:");
     e48:	8f e8       	ldi	r24, 0x8F	; 143
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
			LCD_moveCursor(1,0);/* Move the cursor to the second row */
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LCD_moveCursor>
			for( uint8 i=0;i<5;i++)
     e58:	fe 01       	movw	r30, r28
     e5a:	e9 59       	subi	r30, 0x99	; 153
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	10 82       	st	Z, r1
     e60:	cf c0       	rjmp	.+414    	; 0x1000 <main+0x34c>
			{
				/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
				pass[i]=KEYPAD_getPressedKey();
     e62:	fe 01       	movw	r30, r28
     e64:	e9 59       	subi	r30, 0x99	; 153
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	80 81       	ld	r24, Z
     e6a:	08 2f       	mov	r16, r24
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
     e72:	28 2f       	mov	r18, r24
     e74:	ce 01       	movw	r24, r28
     e76:	87 59       	subi	r24, 0x97	; 151
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	fc 01       	movw	r30, r24
     e7c:	e0 0f       	add	r30, r16
     e7e:	f1 1f       	adc	r31, r17
     e80:	20 83       	st	Z, r18

				//LCD_intgerToString(pass[i]);

				/*Display '*' after pressing instead of displaying the no.*/
				LCD_displayCharacter('*');
     e82:	8a e2       	ldi	r24, 0x2A	; 42
     e84:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_displayCharacter>
     e88:	fe 01       	movw	r30, r28
     e8a:	e1 5a       	subi	r30, 0xA1	; 161
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	aa ef       	ldi	r26, 0xFA	; 250
     e94:	b3 e4       	ldi	r27, 0x43	; 67
     e96:	80 83       	st	Z, r24
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	a2 83       	std	Z+2, r26	; 0x02
     e9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9e:	8e 01       	movw	r16, r28
     ea0:	05 5a       	subi	r16, 0xA5	; 165
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	fe 01       	movw	r30, r28
     ea6:	e1 5a       	subi	r30, 0xA1	; 161
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4a ef       	ldi	r20, 0xFA	; 250
     eb8:	54 e4       	ldi	r21, 0x44	; 68
     eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 83       	st	Z, r24
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	a2 83       	std	Z+2, r26	; 0x02
     eca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ecc:	fe 01       	movw	r30, r28
     ece:	e5 5a       	subi	r30, 0xA5	; 165
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e8       	ldi	r20, 0x80	; 128
     ee0:	5f e3       	ldi	r21, 0x3F	; 63
     ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee6:	88 23       	and	r24, r24
     ee8:	44 f4       	brge	.+16     	; 0xefa <main+0x246>
		__ticks = 1;
     eea:	fe 01       	movw	r30, r28
     eec:	e7 5a       	subi	r30, 0xA7	; 167
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
     ef8:	64 c0       	rjmp	.+200    	; 0xfc2 <main+0x30e>
	else if (__tmp > 65535)
     efa:	fe 01       	movw	r30, r28
     efc:	e5 5a       	subi	r30, 0xA5	; 165
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	3f ef       	ldi	r19, 0xFF	; 255
     f0c:	4f e7       	ldi	r20, 0x7F	; 127
     f0e:	57 e4       	ldi	r21, 0x47	; 71
     f10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f14:	18 16       	cp	r1, r24
     f16:	0c f0       	brlt	.+2      	; 0xf1a <main+0x266>
     f18:	43 c0       	rjmp	.+134    	; 0xfa0 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1a:	fe 01       	movw	r30, r28
     f1c:	e1 5a       	subi	r30, 0xA1	; 161
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8e 01       	movw	r16, r28
     f3a:	07 5a       	subi	r16, 0xA7	; 167
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	f8 01       	movw	r30, r16
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
     f50:	1f c0       	rjmp	.+62     	; 0xf90 <main+0x2dc>
     f52:	fe 01       	movw	r30, r28
     f54:	e9 5a       	subi	r30, 0xA9	; 169
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	88 ec       	ldi	r24, 0xC8	; 200
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f60:	fe 01       	movw	r30, r28
     f62:	e9 5a       	subi	r30, 0xA9	; 169
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <main+0x2b6>
     f6e:	fe 01       	movw	r30, r28
     f70:	e9 5a       	subi	r30, 0xA9	; 169
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	de 01       	movw	r26, r28
     f7a:	a7 5a       	subi	r26, 0xA7	; 167
     f7c:	bf 4f       	sbci	r27, 0xFF	; 255
     f7e:	fe 01       	movw	r30, r28
     f80:	e7 5a       	subi	r30, 0xA7	; 167
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	11 96       	adiw	r26, 0x01	; 1
     f8c:	9c 93       	st	X, r25
     f8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	fe 01       	movw	r30, r28
     f92:	e7 5a       	subi	r30, 0xA7	; 167
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	d1 f6       	brne	.-76     	; 0xf52 <main+0x29e>
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	8e 01       	movw	r16, r28
     fa2:	07 5a       	subi	r16, 0xA7	; 167
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	fe 01       	movw	r30, r28
     fa8:	e5 5a       	subi	r30, 0xA5	; 165
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	60 81       	ld	r22, Z
     fae:	71 81       	ldd	r23, Z+1	; 0x01
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	f8 01       	movw	r30, r16
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	80 83       	st	Z, r24
     fc2:	de 01       	movw	r26, r28
     fc4:	ab 5a       	subi	r26, 0xAB	; 171
     fc6:	bf 4f       	sbci	r27, 0xFF	; 255
     fc8:	fe 01       	movw	r30, r28
     fca:	e7 5a       	subi	r30, 0xA7	; 167
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	8d 93       	st	X+, r24
     fd4:	9c 93       	st	X, r25
     fd6:	fe 01       	movw	r30, r28
     fd8:	eb 5a       	subi	r30, 0xAB	; 171
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <main+0x32c>
     fe4:	fe 01       	movw	r30, r28
     fe6:	eb 5a       	subi	r30, 0xAB	; 171
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
		case create_pass:

			LCD_clearScreen();
			LCD_displayString("plz enter pass:");
			LCD_moveCursor(1,0);/* Move the cursor to the second row */
			for( uint8 i=0;i<5;i++)
     fee:	de 01       	movw	r26, r28
     ff0:	a9 59       	subi	r26, 0x99	; 153
     ff2:	bf 4f       	sbci	r27, 0xFF	; 255
     ff4:	fe 01       	movw	r30, r28
     ff6:	e9 59       	subi	r30, 0x99	; 153
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	8c 93       	st	X, r24
    1000:	fe 01       	movw	r30, r28
    1002:	e9 59       	subi	r30, 0x99	; 153
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	08 f4       	brcc	.+2      	; 0x100e <main+0x35a>
    100c:	2a cf       	rjmp	.-428    	; 0xe62 <main+0x1ae>
				/*Display '*' after pressing instead of displaying the no.*/
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			/*waiting till press "=" (enter)*/
			while(KEYPAD_getPressedKey()!='=');
    100e:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
    1012:	8d 33       	cpi	r24, 0x3D	; 61
    1014:	e1 f7       	brne	.-8      	; 0x100e <main+0x35a>
    1016:	fe 01       	movw	r30, r28
    1018:	ef 5a       	subi	r30, 0xAF	; 175
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	aa ef       	ldi	r26, 0xFA	; 250
    1022:	b3 e4       	ldi	r27, 0x43	; 67
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	a2 83       	std	Z+2, r26	; 0x02
    102a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	8e 01       	movw	r16, r28
    102e:	03 5b       	subi	r16, 0xB3	; 179
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	fe 01       	movw	r30, r28
    1034:	ef 5a       	subi	r30, 0xAF	; 175
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	4a ef       	ldi	r20, 0xFA	; 250
    1046:	54 e4       	ldi	r21, 0x44	; 68
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	f8 01       	movw	r30, r16
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	a2 83       	std	Z+2, r26	; 0x02
    1058:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    105a:	fe 01       	movw	r30, r28
    105c:	e3 5b       	subi	r30, 0xB3	; 179
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	44 f4       	brge	.+16     	; 0x1088 <main+0x3d4>
		__ticks = 1;
    1078:	fe 01       	movw	r30, r28
    107a:	e5 5b       	subi	r30, 0xB5	; 181
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	64 c0       	rjmp	.+200    	; 0x1150 <main+0x49c>
	else if (__tmp > 65535)
    1088:	fe 01       	movw	r30, r28
    108a:	e3 5b       	subi	r30, 0xB3	; 179
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	60 81       	ld	r22, Z
    1090:	71 81       	ldd	r23, Z+1	; 0x01
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <main+0x3f4>
    10a6:	43 c0       	rjmp	.+134    	; 0x112e <main+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	fe 01       	movw	r30, r28
    10aa:	ef 5a       	subi	r30, 0xAF	; 175
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e2       	ldi	r20, 0x20	; 32
    10bc:	51 e4       	ldi	r21, 0x41	; 65
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8e 01       	movw	r16, r28
    10c8:	05 5b       	subi	r16, 0xB5	; 181
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	f8 01       	movw	r30, r16
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
    10de:	1f c0       	rjmp	.+62     	; 0x111e <main+0x46a>
    10e0:	fe 01       	movw	r30, r28
    10e2:	e7 5b       	subi	r30, 0xB7	; 183
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	88 ec       	ldi	r24, 0xC8	; 200
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	80 83       	st	Z, r24
    10ee:	fe 01       	movw	r30, r28
    10f0:	e7 5b       	subi	r30, 0xB7	; 183
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <main+0x444>
    10fc:	fe 01       	movw	r30, r28
    10fe:	e7 5b       	subi	r30, 0xB7	; 183
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1106:	de 01       	movw	r26, r28
    1108:	a5 5b       	subi	r26, 0xB5	; 181
    110a:	bf 4f       	sbci	r27, 0xFF	; 255
    110c:	fe 01       	movw	r30, r28
    110e:	e5 5b       	subi	r30, 0xB5	; 181
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	fe 01       	movw	r30, r28
    1120:	e5 5b       	subi	r30, 0xB5	; 181
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	d1 f6       	brne	.-76     	; 0x10e0 <main+0x42c>
    112c:	27 c0       	rjmp	.+78     	; 0x117c <main+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112e:	8e 01       	movw	r16, r28
    1130:	05 5b       	subi	r16, 0xB5	; 181
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	fe 01       	movw	r30, r28
    1136:	e3 5b       	subi	r30, 0xB3	; 179
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	f8 01       	movw	r30, r16
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
    1150:	de 01       	movw	r26, r28
    1152:	a9 5b       	subi	r26, 0xB9	; 185
    1154:	bf 4f       	sbci	r27, 0xFF	; 255
    1156:	fe 01       	movw	r30, r28
    1158:	e5 5b       	subi	r30, 0xB5	; 181
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	8d 93       	st	X+, r24
    1162:	9c 93       	st	X, r25
    1164:	fe 01       	movw	r30, r28
    1166:	e9 5b       	subi	r30, 0xB9	; 185
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <main+0x4ba>
    1172:	fe 01       	movw	r30, r28
    1174:	e9 5b       	subi	r30, 0xB9	; 185
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
			_delay_ms(500);

			LCD_clearScreen();
    117c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
			LCD_displayString("plz re-enter");
    1180:	8f e9       	ldi	r24, 0x9F	; 159
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"same pass:");
    1188:	2c ea       	ldi	r18, 0xAC	; 172
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayStringRowColumn>
			/*for loop to enter pass again*/
			for( uint8 i=0;i<5;i++)
    1196:	fe 01       	movw	r30, r28
    1198:	ea 59       	subi	r30, 0x9A	; 154
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	10 82       	st	Z, r1
    119e:	a1 c0       	rjmp	.+322    	; 0x12e2 <main+0x62e>
			{
				repass[i]=KEYPAD_getPressedKey();
    11a0:	fe 01       	movw	r30, r28
    11a2:	ea 59       	subi	r30, 0x9A	; 154
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	08 2f       	mov	r16, r24
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
    11b0:	28 2f       	mov	r18, r24
    11b2:	ce 01       	movw	r24, r28
    11b4:	82 59       	subi	r24, 0x92	; 146
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	fc 01       	movw	r30, r24
    11ba:	e0 0f       	add	r30, r16
    11bc:	f1 1f       	adc	r31, r17
    11be:	20 83       	st	Z, r18

				LCD_displayCharacter('*');
    11c0:	8a e2       	ldi	r24, 0x2A	; 42
    11c2:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_displayCharacter>
    11c6:	fe 01       	movw	r30, r28
    11c8:	ed 5b       	subi	r30, 0xBD	; 189
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	aa ef       	ldi	r26, 0xFA	; 250
    11d2:	b3 e4       	ldi	r27, 0x43	; 67
    11d4:	80 83       	st	Z, r24
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	a2 83       	std	Z+2, r26	; 0x02
    11da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11dc:	8e 01       	movw	r16, r28
    11de:	01 5c       	subi	r16, 0xC1	; 193
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	fe 01       	movw	r30, r28
    11e4:	ed 5b       	subi	r30, 0xBD	; 189
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	f8 01       	movw	r30, r16
    1202:	80 83       	st	Z, r24
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	a2 83       	std	Z+2, r26	; 0x02
    1208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    120a:	fe 01       	movw	r30, r28
    120c:	ff 96       	adiw	r30, 0x3f	; 63
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <main+0x57c>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9e af       	std	Y+62, r25	; 0x3e
    122c:	8d af       	std	Y+61, r24	; 0x3d
    122e:	46 c0       	rjmp	.+140    	; 0x12bc <main+0x608>
	else if (__tmp > 65535)
    1230:	fe 01       	movw	r30, r28
    1232:	ff 96       	adiw	r30, 0x3f	; 63
    1234:	60 81       	ld	r22, Z
    1236:	71 81       	ldd	r23, Z+1	; 0x01
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1248:	18 16       	cp	r1, r24
    124a:	64 f5       	brge	.+88     	; 0x12a4 <main+0x5f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124c:	fe 01       	movw	r30, r28
    124e:	ed 5b       	subi	r30, 0xBD	; 189
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e af       	std	Y+62, r25	; 0x3e
    1278:	8d af       	std	Y+61, r24	; 0x3d
    127a:	0f c0       	rjmp	.+30     	; 0x129a <main+0x5e6>
    127c:	88 ec       	ldi	r24, 0xC8	; 200
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9c af       	std	Y+60, r25	; 0x3c
    1282:	8b af       	std	Y+59, r24	; 0x3b
    1284:	8b ad       	ldd	r24, Y+59	; 0x3b
    1286:	9c ad       	ldd	r25, Y+60	; 0x3c
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <main+0x5d4>
    128c:	9c af       	std	Y+60, r25	; 0x3c
    128e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1290:	8d ad       	ldd	r24, Y+61	; 0x3d
    1292:	9e ad       	ldd	r25, Y+62	; 0x3e
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9e af       	std	Y+62, r25	; 0x3e
    1298:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	8d ad       	ldd	r24, Y+61	; 0x3d
    129c:	9e ad       	ldd	r25, Y+62	; 0x3e
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f7       	brne	.-38     	; 0x127c <main+0x5c8>
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <main+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	fe 01       	movw	r30, r28
    12a6:	ff 96       	adiw	r30, 0x3f	; 63
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e af       	std	Y+62, r25	; 0x3e
    12ba:	8d af       	std	Y+61, r24	; 0x3d
    12bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    12be:	9e ad       	ldd	r25, Y+62	; 0x3e
    12c0:	9a af       	std	Y+58, r25	; 0x3a
    12c2:	89 af       	std	Y+57, r24	; 0x39
    12c4:	89 ad       	ldd	r24, Y+57	; 0x39
    12c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <main+0x614>
    12cc:	9a af       	std	Y+58, r25	; 0x3a
    12ce:	89 af       	std	Y+57, r24	; 0x39

			LCD_clearScreen();
			LCD_displayString("plz re-enter");
			LCD_displayStringRowColumn(1,0,"same pass:");
			/*for loop to enter pass again*/
			for( uint8 i=0;i<5;i++)
    12d0:	de 01       	movw	r26, r28
    12d2:	aa 59       	subi	r26, 0x9A	; 154
    12d4:	bf 4f       	sbci	r27, 0xFF	; 255
    12d6:	fe 01       	movw	r30, r28
    12d8:	ea 59       	subi	r30, 0x9A	; 154
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	80 81       	ld	r24, Z
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	8c 93       	st	X, r24
    12e2:	fe 01       	movw	r30, r28
    12e4:	ea 59       	subi	r30, 0x9A	; 154
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	80 81       	ld	r24, Z
    12ea:	85 30       	cpi	r24, 0x05	; 5
    12ec:	08 f4       	brcc	.+2      	; 0x12f0 <main+0x63c>
    12ee:	58 cf       	rjmp	.-336    	; 0x11a0 <main+0x4ec>
				LCD_displayCharacter('*');
				//LCD_intgerToString(repass[i]);
				_delay_ms(500);
			}

			while(KEYPAD_getPressedKey()!='=');
    12f0:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
    12f4:	8d 33       	cpi	r24, 0x3D	; 61
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <main+0x63c>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	aa ef       	ldi	r26, 0xFA	; 250
    12fe:	b3 e4       	ldi	r27, 0x43	; 67
    1300:	8d ab       	std	Y+53, r24	; 0x35
    1302:	9e ab       	std	Y+54, r25	; 0x36
    1304:	af ab       	std	Y+55, r26	; 0x37
    1306:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1308:	6d a9       	ldd	r22, Y+53	; 0x35
    130a:	7e a9       	ldd	r23, Y+54	; 0x36
    130c:	8f a9       	ldd	r24, Y+55	; 0x37
    130e:	98 ad       	ldd	r25, Y+56	; 0x38
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a ef       	ldi	r20, 0xFA	; 250
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	89 ab       	std	Y+49, r24	; 0x31
    1322:	9a ab       	std	Y+50, r25	; 0x32
    1324:	ab ab       	std	Y+51, r26	; 0x33
    1326:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1328:	69 a9       	ldd	r22, Y+49	; 0x31
    132a:	7a a9       	ldd	r23, Y+50	; 0x32
    132c:	8b a9       	ldd	r24, Y+51	; 0x33
    132e:	9c a9       	ldd	r25, Y+52	; 0x34
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <main+0x696>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	98 ab       	std	Y+48, r25	; 0x30
    1346:	8f a7       	std	Y+47, r24	; 0x2f
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <main+0x714>
	else if (__tmp > 65535)
    134a:	69 a9       	ldd	r22, Y+49	; 0x31
    134c:	7a a9       	ldd	r23, Y+50	; 0x32
    134e:	8b a9       	ldd	r24, Y+51	; 0x33
    1350:	9c a9       	ldd	r25, Y+52	; 0x34
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135e:	18 16       	cp	r1, r24
    1360:	4c f5       	brge	.+82     	; 0x13b4 <main+0x700>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	6d a9       	ldd	r22, Y+53	; 0x35
    1364:	7e a9       	ldd	r23, Y+54	; 0x36
    1366:	8f a9       	ldd	r24, Y+55	; 0x37
    1368:	98 ad       	ldd	r25, Y+56	; 0x38
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	98 ab       	std	Y+48, r25	; 0x30
    1388:	8f a7       	std	Y+47, r24	; 0x2f
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <main+0x6f6>
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9e a7       	std	Y+46, r25	; 0x2e
    1392:	8d a7       	std	Y+45, r24	; 0x2d
    1394:	8d a5       	ldd	r24, Y+45	; 0x2d
    1396:	9e a5       	ldd	r25, Y+46	; 0x2e
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <main+0x6e4>
    139c:	9e a7       	std	Y+46, r25	; 0x2e
    139e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a2:	98 a9       	ldd	r25, Y+48	; 0x30
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	98 ab       	std	Y+48, r25	; 0x30
    13a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ac:	98 a9       	ldd	r25, Y+48	; 0x30
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	69 f7       	brne	.-38     	; 0x138c <main+0x6d8>
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <main+0x728>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b4:	69 a9       	ldd	r22, Y+49	; 0x31
    13b6:	7a a9       	ldd	r23, Y+50	; 0x32
    13b8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ba:	9c a9       	ldd	r25, Y+52	; 0x34
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	98 ab       	std	Y+48, r25	; 0x30
    13c6:	8f a7       	std	Y+47, r24	; 0x2f
    13c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ca:	98 a9       	ldd	r25, Y+48	; 0x30
    13cc:	9c a7       	std	Y+44, r25	; 0x2c
    13ce:	8b a7       	std	Y+43, r24	; 0x2b
    13d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <main+0x720>
    13d8:	9c a7       	std	Y+44, r25	; 0x2c
    13da:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			for( uint8 i=0;i<5;i++)
    13dc:	fe 01       	movw	r30, r28
    13de:	eb 59       	subi	r30, 0x9B	; 155
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	10 82       	st	Z, r1
    13e4:	35 c0       	rjmp	.+106    	; 0x1450 <main+0x79c>
			{
				/*MC1 sending the pass to MC2 */

				UART_sendByte(MC1_ASK_MC2);
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
				while( UART_recieveByte()!= MC2_ANS_MC1);
    13ec:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <main+0x738>
				UART_sendByte(pass[i]);
    13f4:	fe 01       	movw	r30, r28
    13f6:	eb 59       	subi	r30, 0x9B	; 155
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	ce 01       	movw	r24, r28
    1402:	87 59       	subi	r24, 0x97	; 151
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	fc 01       	movw	r30, r24
    1408:	e2 0f       	add	r30, r18
    140a:	f3 1f       	adc	r31, r19
    140c:	80 81       	ld	r24, Z
    140e:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
				UART_sendByte(MC1_ASK_MC2);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
				while( UART_recieveByte()!= MC2_ANS_MC1);
    1418:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
    141c:	84 30       	cpi	r24, 0x04	; 4
    141e:	e1 f7       	brne	.-8      	; 0x1418 <main+0x764>
				UART_sendByte(repass[i]);
    1420:	fe 01       	movw	r30, r28
    1422:	eb 59       	subi	r30, 0x9B	; 155
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 81       	ld	r24, Z
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	82 59       	subi	r24, 0x92	; 146
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	fc 01       	movw	r30, r24
    1434:	e2 0f       	add	r30, r18
    1436:	f3 1f       	adc	r31, r19
    1438:	80 81       	ld	r24, Z
    143a:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
				_delay_ms(500);
			}

			while(KEYPAD_getPressedKey()!='=');
			_delay_ms(500);
			for( uint8 i=0;i<5;i++)
    143e:	de 01       	movw	r26, r28
    1440:	ab 59       	subi	r26, 0x9B	; 155
    1442:	bf 4f       	sbci	r27, 0xFF	; 255
    1444:	fe 01       	movw	r30, r28
    1446:	eb 59       	subi	r30, 0x9B	; 155
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	8f 5f       	subi	r24, 0xFF	; 255
    144e:	8c 93       	st	X, r24
    1450:	fe 01       	movw	r30, r28
    1452:	eb 59       	subi	r30, 0x9B	; 155
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	85 30       	cpi	r24, 0x05	; 5
    145a:	28 f2       	brcs	.-118    	; 0x13e6 <main+0x732>
    145c:	99 cc       	rjmp	.-1742   	; 0xd90 <main+0xdc>
			break;


		case options:

			LCD_clearScreen();
    145e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
			LCD_displayString("+ : open door");
    1462:	87 eb       	ldi	r24, 0xB7	; 183
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"- : change pass");
    146a:	25 ec       	ldi	r18, 0xC5	; 197
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	a9 01       	movw	r20, r18
    1474:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayStringRowColumn>


			/*waits in a while loop till the user enters the right options */
			while(1){
				option=KEYPAD_getPressedKey();
    1478:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
    147c:	fe 01       	movw	r30, r28
    147e:	e8 59       	subi	r30, 0x98	; 152
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 83       	st	Z, r24
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	aa ef       	ldi	r26, 0xFA	; 250
    148a:	b3 e4       	ldi	r27, 0x43	; 67
    148c:	8f a3       	std	Y+39, r24	; 0x27
    148e:	98 a7       	std	Y+40, r25	; 0x28
    1490:	a9 a7       	std	Y+41, r26	; 0x29
    1492:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1494:	6f a1       	ldd	r22, Y+39	; 0x27
    1496:	78 a5       	ldd	r23, Y+40	; 0x28
    1498:	89 a5       	ldd	r24, Y+41	; 0x29
    149a:	9a a5       	ldd	r25, Y+42	; 0x2a
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4a ef       	ldi	r20, 0xFA	; 250
    14a2:	54 e4       	ldi	r21, 0x44	; 68
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	8b a3       	std	Y+35, r24	; 0x23
    14ae:	9c a3       	std	Y+36, r25	; 0x24
    14b0:	ad a3       	std	Y+37, r26	; 0x25
    14b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14b4:	6b a1       	ldd	r22, Y+35	; 0x23
    14b6:	7c a1       	ldd	r23, Y+36	; 0x24
    14b8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ba:	9e a1       	ldd	r25, Y+38	; 0x26
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e8       	ldi	r20, 0x80	; 128
    14c2:	5f e3       	ldi	r21, 0x3F	; 63
    14c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c8:	88 23       	and	r24, r24
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <main+0x822>
		__ticks = 1;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9a a3       	std	Y+34, r25	; 0x22
    14d2:	89 a3       	std	Y+33, r24	; 0x21
    14d4:	3f c0       	rjmp	.+126    	; 0x1554 <main+0x8a0>
	else if (__tmp > 65535)
    14d6:	6b a1       	ldd	r22, Y+35	; 0x23
    14d8:	7c a1       	ldd	r23, Y+36	; 0x24
    14da:	8d a1       	ldd	r24, Y+37	; 0x25
    14dc:	9e a1       	ldd	r25, Y+38	; 0x26
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	3f ef       	ldi	r19, 0xFF	; 255
    14e2:	4f e7       	ldi	r20, 0x7F	; 127
    14e4:	57 e4       	ldi	r21, 0x47	; 71
    14e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	4c f5       	brge	.+82     	; 0x1540 <main+0x88c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ee:	6f a1       	ldd	r22, Y+39	; 0x27
    14f0:	78 a5       	ldd	r23, Y+40	; 0x28
    14f2:	89 a5       	ldd	r24, Y+41	; 0x29
    14f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e2       	ldi	r20, 0x20	; 32
    14fc:	51 e4       	ldi	r21, 0x41	; 65
    14fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	9a a3       	std	Y+34, r25	; 0x22
    1514:	89 a3       	std	Y+33, r24	; 0x21
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <main+0x882>
    1518:	88 ec       	ldi	r24, 0xC8	; 200
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	98 a3       	std	Y+32, r25	; 0x20
    151e:	8f 8f       	std	Y+31, r24	; 0x1f
    1520:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1522:	98 a1       	ldd	r25, Y+32	; 0x20
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <main+0x870>
    1528:	98 a3       	std	Y+32, r25	; 0x20
    152a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152c:	89 a1       	ldd	r24, Y+33	; 0x21
    152e:	9a a1       	ldd	r25, Y+34	; 0x22
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1536:	89 a1       	ldd	r24, Y+33	; 0x21
    1538:	9a a1       	ldd	r25, Y+34	; 0x22
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	69 f7       	brne	.-38     	; 0x1518 <main+0x864>
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <main+0x8b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1540:	6b a1       	ldd	r22, Y+35	; 0x23
    1542:	7c a1       	ldd	r23, Y+36	; 0x24
    1544:	8d a1       	ldd	r24, Y+37	; 0x25
    1546:	9e a1       	ldd	r25, Y+38	; 0x26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9a a3       	std	Y+34, r25	; 0x22
    1552:	89 a3       	std	Y+33, r24	; 0x21
    1554:	89 a1       	ldd	r24, Y+33	; 0x21
    1556:	9a a1       	ldd	r25, Y+34	; 0x22
    1558:	9e 8f       	std	Y+30, r25	; 0x1e
    155a:	8d 8f       	std	Y+29, r24	; 0x1d
    155c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    155e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <main+0x8ac>
    1564:	9e 8f       	std	Y+30, r25	; 0x1e
    1566:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				if(option=='+' ||option=='-')
    1568:	fe 01       	movw	r30, r28
    156a:	e8 59       	subi	r30, 0x98	; 152
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	8b 32       	cpi	r24, 0x2B	; 43
    1572:	39 f0       	breq	.+14     	; 0x1582 <main+0x8ce>
    1574:	fe 01       	movw	r30, r28
    1576:	e8 59       	subi	r30, 0x98	; 152
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	8d 32       	cpi	r24, 0x2D	; 45
    157e:	09 f0       	breq	.+2      	; 0x1582 <main+0x8ce>
    1580:	7b cf       	rjmp	.-266    	; 0x1478 <main+0x7c4>
					break;
			}
			/*MC1 sending the required option  to MC2 */
			UART_sendByte(MC1_ASK_MC2);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
			while( UART_recieveByte()!= MC2_ANS_MC1);
    1588:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	e1 f7       	brne	.-8      	; 0x1588 <main+0x8d4>
			UART_sendByte(option);
    1590:	fe 01       	movw	r30, r28
    1592:	e8 59       	subi	r30, 0x98	; 152
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
    159c:	f9 cb       	rjmp	.-2062   	; 0xd90 <main+0xdc>

			/*put the two cases together bec. they have same function  */
		case change_pass_req:
		case open_door_req:

			LCD_clearScreen();
    159e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <LCD_clearScreen>
			LCD_displayString("plz entr pass:");
    15a2:	85 ed       	ldi	r24, 0xD5	; 213
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
			LCD_moveCursor(1,0);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LCD_moveCursor>

			for( uint8 i=0;i<5;i++)
    15b2:	fe 01       	movw	r30, r28
    15b4:	ec 59       	subi	r30, 0x9C	; 156
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	10 82       	st	Z, r1
    15ba:	8e c0       	rjmp	.+284    	; 0x16d8 <main+0xa24>
			{
				/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
				pass[i]=KEYPAD_getPressedKey();
    15bc:	fe 01       	movw	r30, r28
    15be:	ec 59       	subi	r30, 0x9C	; 156
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	08 2f       	mov	r16, r24
    15c6:	10 e0       	ldi	r17, 0x00	; 0
    15c8:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
    15cc:	28 2f       	mov	r18, r24
    15ce:	ce 01       	movw	r24, r28
    15d0:	87 59       	subi	r24, 0x97	; 151
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	fc 01       	movw	r30, r24
    15d6:	e0 0f       	add	r30, r16
    15d8:	f1 1f       	adc	r31, r17
    15da:	20 83       	st	Z, r18

				//LCD_intgerToString(pass[i]);
				/*Display '*' after pressing instead of displaying the no.*/
				LCD_displayCharacter('*');
    15dc:	8a e2       	ldi	r24, 0x2A	; 42
    15de:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_displayCharacter>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	aa ef       	ldi	r26, 0xFA	; 250
    15e8:	b3 e4       	ldi	r27, 0x43	; 67
    15ea:	89 8f       	std	Y+25, r24	; 0x19
    15ec:	9a 8f       	std	Y+26, r25	; 0x1a
    15ee:	ab 8f       	std	Y+27, r26	; 0x1b
    15f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f2:	69 8d       	ldd	r22, Y+25	; 0x19
    15f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4a ef       	ldi	r20, 0xFA	; 250
    1600:	54 e4       	ldi	r21, 0x44	; 68
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8d 8b       	std	Y+21, r24	; 0x15
    160c:	9e 8b       	std	Y+22, r25	; 0x16
    160e:	af 8b       	std	Y+23, r26	; 0x17
    1610:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1612:	6d 89       	ldd	r22, Y+21	; 0x15
    1614:	7e 89       	ldd	r23, Y+22	; 0x16
    1616:	8f 89       	ldd	r24, Y+23	; 0x17
    1618:	98 8d       	ldd	r25, Y+24	; 0x18
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	2c f4       	brge	.+10     	; 0x1634 <main+0x980>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9c 8b       	std	Y+20, r25	; 0x14
    1630:	8b 8b       	std	Y+19, r24	; 0x13
    1632:	3f c0       	rjmp	.+126    	; 0x16b2 <main+0x9fe>
	else if (__tmp > 65535)
    1634:	6d 89       	ldd	r22, Y+21	; 0x15
    1636:	7e 89       	ldd	r23, Y+22	; 0x16
    1638:	8f 89       	ldd	r24, Y+23	; 0x17
    163a:	98 8d       	ldd	r25, Y+24	; 0x18
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	3f ef       	ldi	r19, 0xFF	; 255
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	57 e4       	ldi	r21, 0x47	; 71
    1644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1648:	18 16       	cp	r1, r24
    164a:	4c f5       	brge	.+82     	; 0x169e <main+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164c:	69 8d       	ldd	r22, Y+25	; 0x19
    164e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e2       	ldi	r20, 0x20	; 32
    165a:	51 e4       	ldi	r21, 0x41	; 65
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	9c 8b       	std	Y+20, r25	; 0x14
    1672:	8b 8b       	std	Y+19, r24	; 0x13
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <main+0x9e0>
    1676:	88 ec       	ldi	r24, 0xC8	; 200
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9a 8b       	std	Y+18, r25	; 0x12
    167c:	89 8b       	std	Y+17, r24	; 0x11
    167e:	89 89       	ldd	r24, Y+17	; 0x11
    1680:	9a 89       	ldd	r25, Y+18	; 0x12
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <main+0x9ce>
    1686:	9a 8b       	std	Y+18, r25	; 0x12
    1688:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	8b 89       	ldd	r24, Y+19	; 0x13
    168c:	9c 89       	ldd	r25, Y+20	; 0x14
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	9c 8b       	std	Y+20, r25	; 0x14
    1692:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1694:	8b 89       	ldd	r24, Y+19	; 0x13
    1696:	9c 89       	ldd	r25, Y+20	; 0x14
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	69 f7       	brne	.-38     	; 0x1676 <main+0x9c2>
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <main+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169e:	6d 89       	ldd	r22, Y+21	; 0x15
    16a0:	7e 89       	ldd	r23, Y+22	; 0x16
    16a2:	8f 89       	ldd	r24, Y+23	; 0x17
    16a4:	98 8d       	ldd	r25, Y+24	; 0x18
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9c 8b       	std	Y+20, r25	; 0x14
    16b0:	8b 8b       	std	Y+19, r24	; 0x13
    16b2:	8b 89       	ldd	r24, Y+19	; 0x13
    16b4:	9c 89       	ldd	r25, Y+20	; 0x14
    16b6:	98 8b       	std	Y+16, r25	; 0x10
    16b8:	8f 87       	std	Y+15, r24	; 0x0f
    16ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    16bc:	98 89       	ldd	r25, Y+16	; 0x10
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <main+0xa0a>
    16c2:	98 8b       	std	Y+16, r25	; 0x10
    16c4:	8f 87       	std	Y+15, r24	; 0x0f

			LCD_clearScreen();
			LCD_displayString("plz entr pass:");
			LCD_moveCursor(1,0);

			for( uint8 i=0;i<5;i++)
    16c6:	de 01       	movw	r26, r28
    16c8:	ac 59       	subi	r26, 0x9C	; 156
    16ca:	bf 4f       	sbci	r27, 0xFF	; 255
    16cc:	fe 01       	movw	r30, r28
    16ce:	ec 59       	subi	r30, 0x9C	; 156
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	8f 5f       	subi	r24, 0xFF	; 255
    16d6:	8c 93       	st	X, r24
    16d8:	fe 01       	movw	r30, r28
    16da:	ec 59       	subi	r30, 0x9C	; 156
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	85 30       	cpi	r24, 0x05	; 5
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <main+0xa32>
    16e4:	6b cf       	rjmp	.-298    	; 0x15bc <main+0x908>

				_delay_ms(500);
			}

			/*waiting till press "=" (enter)*/
			while(KEYPAD_getPressedKey()!='=');
    16e6:	0e 94 11 11 	call	0x2222	; 0x2222 <KEYPAD_getPressedKey>
    16ea:	8d 33       	cpi	r24, 0x3D	; 61
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <main+0xa32>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	aa ef       	ldi	r26, 0xFA	; 250
    16f4:	b3 e4       	ldi	r27, 0x43	; 67
    16f6:	8b 87       	std	Y+11, r24	; 0x0b
    16f8:	9c 87       	std	Y+12, r25	; 0x0c
    16fa:	ad 87       	std	Y+13, r26	; 0x0d
    16fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1700:	7c 85       	ldd	r23, Y+12	; 0x0c
    1702:	8d 85       	ldd	r24, Y+13	; 0x0d
    1704:	9e 85       	ldd	r25, Y+14	; 0x0e
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a ef       	ldi	r20, 0xFA	; 250
    170c:	54 e4       	ldi	r21, 0x44	; 68
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	8f 83       	std	Y+7, r24	; 0x07
    1718:	98 87       	std	Y+8, r25	; 0x08
    171a:	a9 87       	std	Y+9, r26	; 0x09
    171c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1732:	88 23       	and	r24, r24
    1734:	2c f4       	brge	.+10     	; 0x1740 <main+0xa8c>
		__ticks = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	3f c0       	rjmp	.+126    	; 0x17be <main+0xb0a>
	else if (__tmp > 65535)
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	4c f5       	brge	.+82     	; 0x17aa <main+0xaf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	6b 85       	ldd	r22, Y+11	; 0x0b
    175a:	7c 85       	ldd	r23, Y+12	; 0x0c
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <main+0xaec>
    1782:	88 ec       	ldi	r24, 0xC8	; 200
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <main+0xada>
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	69 f7       	brne	.-38     	; 0x1782 <main+0xace>
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <main+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <main+0xb16>
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);

			/* send the pass to MC2*/
			for( uint8 i=0;i<5;i++)
    17d2:	fe 01       	movw	r30, r28
    17d4:	ed 59       	subi	r30, 0x9D	; 157
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	10 82       	st	Z, r1
    17da:	1f c0       	rjmp	.+62     	; 0x181a <main+0xb66>
			{
				UART_sendByte(MC1_ASK_MC2);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
				while( UART_recieveByte()!= MC2_ANS_MC1);
    17e2:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <main+0xb2e>
				UART_sendByte(pass[i]);
    17ea:	fe 01       	movw	r30, r28
    17ec:	ed 59       	subi	r30, 0x9D	; 157
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	ce 01       	movw	r24, r28
    17f8:	87 59       	subi	r24, 0x97	; 151
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	fc 01       	movw	r30, r24
    17fe:	e2 0f       	add	r30, r18
    1800:	f3 1f       	adc	r31, r19
    1802:	80 81       	ld	r24, Z
    1804:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
			/*waiting till press "=" (enter)*/
			while(KEYPAD_getPressedKey()!='=');
			_delay_ms(500);

			/* send the pass to MC2*/
			for( uint8 i=0;i<5;i++)
    1808:	de 01       	movw	r26, r28
    180a:	ad 59       	subi	r26, 0x9D	; 157
    180c:	bf 4f       	sbci	r27, 0xFF	; 255
    180e:	fe 01       	movw	r30, r28
    1810:	ed 59       	subi	r30, 0x9D	; 157
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	8c 93       	st	X, r24
    181a:	fe 01       	movw	r30, r28
    181c:	ed 59       	subi	r30, 0x9D	; 157
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	85 30       	cpi	r24, 0x05	; 5
    1824:	d8 f2       	brcs	.-74     	; 0x17dc <main+0xb28>
    1826:	b4 ca       	rjmp	.-2712   	; 0xd90 <main+0xdc>
			break;

		case open_door:

			/*enable flag */
			wait_flag=1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	80 93 0a 01 	sts	0x010A, r24
			/*
			 * FIRST MAKE THE TIMER INIT BY 0.25 SEC
			 * TO GO TO THE CALL BACK FUNCTION FAST WITHOUT DELAYS
			 * THEN MAKE TIMER INIT TO 3 SEC IN THE CALL BACK FUNCTION
			 */
			Timer1_ConfigType Timer1_Configurations1= {0,1953,F_CPU_1024,COMPARE_MODE};
    182e:	ce 01       	movw	r24, r28
    1830:	88 58       	subi	r24, 0x88	; 136
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	c5 57       	subi	r28, 0x75	; 117
    1836:	df 4f       	sbci	r29, 0xFF	; 255
    1838:	99 83       	std	Y+1, r25	; 0x01
    183a:	88 83       	st	Y, r24
    183c:	cb 58       	subi	r28, 0x8B	; 139
    183e:	d0 40       	sbci	r29, 0x00	; 0
    1840:	2e ef       	ldi	r18, 0xFE	; 254
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	c3 57       	subi	r28, 0x73	; 115
    1846:	df 4f       	sbci	r29, 0xFF	; 255
    1848:	39 83       	std	Y+1, r19	; 0x01
    184a:	28 83       	st	Y, r18
    184c:	cd 58       	subi	r28, 0x8D	; 141
    184e:	d0 40       	sbci	r29, 0x00	; 0
    1850:	36 e0       	ldi	r19, 0x06	; 6
    1852:	c1 57       	subi	r28, 0x71	; 113
    1854:	df 4f       	sbci	r29, 0xFF	; 255
    1856:	38 83       	st	Y, r19
    1858:	cf 58       	subi	r28, 0x8F	; 143
    185a:	d0 40       	sbci	r29, 0x00	; 0
    185c:	c3 57       	subi	r28, 0x73	; 115
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	e8 81       	ld	r30, Y
    1862:	f9 81       	ldd	r31, Y+1	; 0x01
    1864:	cd 58       	subi	r28, 0x8D	; 141
    1866:	d0 40       	sbci	r29, 0x00	; 0
    1868:	00 80       	ld	r0, Z
    186a:	c3 57       	subi	r28, 0x73	; 115
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	28 81       	ld	r18, Y
    1870:	39 81       	ldd	r19, Y+1	; 0x01
    1872:	cd 58       	subi	r28, 0x8D	; 141
    1874:	d0 40       	sbci	r29, 0x00	; 0
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	c3 57       	subi	r28, 0x73	; 115
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	39 83       	std	Y+1, r19	; 0x01
    1880:	28 83       	st	Y, r18
    1882:	cd 58       	subi	r28, 0x8D	; 141
    1884:	d0 40       	sbci	r29, 0x00	; 0
    1886:	c5 57       	subi	r28, 0x75	; 117
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	e8 81       	ld	r30, Y
    188c:	f9 81       	ldd	r31, Y+1	; 0x01
    188e:	cb 58       	subi	r28, 0x8B	; 139
    1890:	d0 40       	sbci	r29, 0x00	; 0
    1892:	00 82       	st	Z, r0
    1894:	c5 57       	subi	r28, 0x75	; 117
    1896:	df 4f       	sbci	r29, 0xFF	; 255
    1898:	28 81       	ld	r18, Y
    189a:	39 81       	ldd	r19, Y+1	; 0x01
    189c:	cb 58       	subi	r28, 0x8B	; 139
    189e:	d0 40       	sbci	r29, 0x00	; 0
    18a0:	2f 5f       	subi	r18, 0xFF	; 255
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	c5 57       	subi	r28, 0x75	; 117
    18a6:	df 4f       	sbci	r29, 0xFF	; 255
    18a8:	39 83       	std	Y+1, r19	; 0x01
    18aa:	28 83       	st	Y, r18
    18ac:	cb 58       	subi	r28, 0x8B	; 139
    18ae:	d0 40       	sbci	r29, 0x00	; 0
    18b0:	c1 57       	subi	r28, 0x71	; 113
    18b2:	df 4f       	sbci	r29, 0xFF	; 255
    18b4:	38 81       	ld	r19, Y
    18b6:	cf 58       	subi	r28, 0x8F	; 143
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	31 50       	subi	r19, 0x01	; 1
    18bc:	c1 57       	subi	r28, 0x71	; 113
    18be:	df 4f       	sbci	r29, 0xFF	; 255
    18c0:	38 83       	st	Y, r19
    18c2:	cf 58       	subi	r28, 0x8F	; 143
    18c4:	d0 40       	sbci	r29, 0x00	; 0
    18c6:	c1 57       	subi	r28, 0x71	; 113
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	88 81       	ld	r24, Y
    18cc:	cf 58       	subi	r28, 0x8F	; 143
    18ce:	d0 40       	sbci	r29, 0x00	; 0
    18d0:	88 23       	and	r24, r24
    18d2:	21 f6       	brne	.-120    	; 0x185c <main+0xba8>
			Timer1_setCallBack(openCallBackFunction);
    18d4:	83 ea       	ldi	r24, 0xA3	; 163
    18d6:	95 e0       	ldi	r25, 0x05	; 5
    18d8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Timer1_setCallBack>

			Timer1_init(&Timer1_Configurations1);
    18dc:	ce 01       	movw	r24, r28
    18de:	88 58       	subi	r24, 0x88	; 136
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Timer1_init>
			/* waits till the flag returns to zero (to go to option state)*/
			while(wait_flag!=0);
    18e6:	80 91 0a 01 	lds	r24, 0x010A
    18ea:	88 23       	and	r24, r24
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <main+0xc32>
			state=options;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 93 0f 01 	sts	0x010F, r24
    18f4:	4d ca       	rjmp	.-2918   	; 0xd90 <main+0xdc>
			break;

		case warning:

			/*enable flag*/
			wait_flag=1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 0a 01 	sts	0x010A, r24
			/*
			 * FIRST MAKE THE TIMER INIT BY 0.25 SEC
			 * TO GO TO THE CALL BACK FUNCTION FAST WITHOUT DELAYS
			 * THEN MAKE TIMER INIT TO 5 SEC IN THE CALL BACK FUNCTION
			 */
			Timer1_ConfigType Timer1_Configurations2= {0,1953,F_CPU_1024,COMPARE_MODE};
    18fc:	ce 01       	movw	r24, r28
    18fe:	82 58       	subi	r24, 0x82	; 130
    1900:	9f 4f       	sbci	r25, 0xFF	; 255
    1902:	c0 57       	subi	r28, 0x70	; 112
    1904:	df 4f       	sbci	r29, 0xFF	; 255
    1906:	99 83       	std	Y+1, r25	; 0x01
    1908:	88 83       	st	Y, r24
    190a:	c0 59       	subi	r28, 0x90	; 144
    190c:	d0 40       	sbci	r29, 0x00	; 0
    190e:	e8 ef       	ldi	r30, 0xF8	; 248
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	ce 56       	subi	r28, 0x6E	; 110
    1914:	df 4f       	sbci	r29, 0xFF	; 255
    1916:	f9 83       	std	Y+1, r31	; 0x01
    1918:	e8 83       	st	Y, r30
    191a:	c2 59       	subi	r28, 0x92	; 146
    191c:	d0 40       	sbci	r29, 0x00	; 0
    191e:	f6 e0       	ldi	r31, 0x06	; 6
    1920:	cc 56       	subi	r28, 0x6C	; 108
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	f8 83       	st	Y, r31
    1926:	c4 59       	subi	r28, 0x94	; 148
    1928:	d0 40       	sbci	r29, 0x00	; 0
    192a:	ce 56       	subi	r28, 0x6E	; 110
    192c:	df 4f       	sbci	r29, 0xFF	; 255
    192e:	e8 81       	ld	r30, Y
    1930:	f9 81       	ldd	r31, Y+1	; 0x01
    1932:	c2 59       	subi	r28, 0x92	; 146
    1934:	d0 40       	sbci	r29, 0x00	; 0
    1936:	00 80       	ld	r0, Z
    1938:	ce 56       	subi	r28, 0x6E	; 110
    193a:	df 4f       	sbci	r29, 0xFF	; 255
    193c:	28 81       	ld	r18, Y
    193e:	39 81       	ldd	r19, Y+1	; 0x01
    1940:	c2 59       	subi	r28, 0x92	; 146
    1942:	d0 40       	sbci	r29, 0x00	; 0
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	ce 56       	subi	r28, 0x6E	; 110
    194a:	df 4f       	sbci	r29, 0xFF	; 255
    194c:	39 83       	std	Y+1, r19	; 0x01
    194e:	28 83       	st	Y, r18
    1950:	c2 59       	subi	r28, 0x92	; 146
    1952:	d0 40       	sbci	r29, 0x00	; 0
    1954:	c0 57       	subi	r28, 0x70	; 112
    1956:	df 4f       	sbci	r29, 0xFF	; 255
    1958:	e8 81       	ld	r30, Y
    195a:	f9 81       	ldd	r31, Y+1	; 0x01
    195c:	c0 59       	subi	r28, 0x90	; 144
    195e:	d0 40       	sbci	r29, 0x00	; 0
    1960:	00 82       	st	Z, r0
    1962:	c0 57       	subi	r28, 0x70	; 112
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	28 81       	ld	r18, Y
    1968:	39 81       	ldd	r19, Y+1	; 0x01
    196a:	c0 59       	subi	r28, 0x90	; 144
    196c:	d0 40       	sbci	r29, 0x00	; 0
    196e:	2f 5f       	subi	r18, 0xFF	; 255
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	c0 57       	subi	r28, 0x70	; 112
    1974:	df 4f       	sbci	r29, 0xFF	; 255
    1976:	39 83       	std	Y+1, r19	; 0x01
    1978:	28 83       	st	Y, r18
    197a:	c0 59       	subi	r28, 0x90	; 144
    197c:	d0 40       	sbci	r29, 0x00	; 0
    197e:	cc 56       	subi	r28, 0x6C	; 108
    1980:	df 4f       	sbci	r29, 0xFF	; 255
    1982:	38 81       	ld	r19, Y
    1984:	c4 59       	subi	r28, 0x94	; 148
    1986:	d0 40       	sbci	r29, 0x00	; 0
    1988:	31 50       	subi	r19, 0x01	; 1
    198a:	cc 56       	subi	r28, 0x6C	; 108
    198c:	df 4f       	sbci	r29, 0xFF	; 255
    198e:	38 83       	st	Y, r19
    1990:	c4 59       	subi	r28, 0x94	; 148
    1992:	d0 40       	sbci	r29, 0x00	; 0
    1994:	cc 56       	subi	r28, 0x6C	; 108
    1996:	df 4f       	sbci	r29, 0xFF	; 255
    1998:	88 81       	ld	r24, Y
    199a:	c4 59       	subi	r28, 0x94	; 148
    199c:	d0 40       	sbci	r29, 0x00	; 0
    199e:	88 23       	and	r24, r24
    19a0:	21 f6       	brne	.-120    	; 0x192a <main+0xc76>
			Timer1_setCallBack(warnCallBackFunction);
    19a2:	8a e0       	ldi	r24, 0x0A	; 10
    19a4:	96 e0       	ldi	r25, 0x06	; 6
    19a6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Timer1_setCallBack>

			Timer1_init(&Timer1_Configurations2);
    19aa:	ce 01       	movw	r24, r28
    19ac:	82 58       	subi	r24, 0x82	; 130
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <Timer1_init>
			/* waits till the flag returns to zero (to go to option state)*/
			while(wait_flag!=0);
    19b4:	80 91 0a 01 	lds	r24, 0x010A
    19b8:	88 23       	and	r24, r24
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <main+0xd00>
			state=options;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 0f 01 	sts	0x010F, r24
    19c2:	e6 c9       	rjmp	.-3124   	; 0xd90 <main+0xdc>

000019c4 <__vector_7>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;


ISR(TIMER1_COMPA_vect)
{
    19c4:	1f 92       	push	r1
    19c6:	0f 92       	push	r0
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	0f 92       	push	r0
    19cc:	11 24       	eor	r1, r1
    19ce:	2f 93       	push	r18
    19d0:	3f 93       	push	r19
    19d2:	4f 93       	push	r20
    19d4:	5f 93       	push	r21
    19d6:	6f 93       	push	r22
    19d8:	7f 93       	push	r23
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	af 93       	push	r26
    19e0:	bf 93       	push	r27
    19e2:	ef 93       	push	r30
    19e4:	ff 93       	push	r31
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19ee:	80 91 0d 01 	lds	r24, 0x010D
    19f2:	90 91 0e 01 	lds	r25, 0x010E
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	29 f0       	breq	.+10     	; 0x1a04 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19fa:	e0 91 0d 01 	lds	r30, 0x010D
    19fe:	f0 91 0e 01 	lds	r31, 0x010E
    1a02:	09 95       	icall
	}
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	ff 91       	pop	r31
    1a0a:	ef 91       	pop	r30
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a54:	80 91 0d 01 	lds	r24, 0x010D
    1a58:	90 91 0e 01 	lds	r25, 0x010E
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a60:	e0 91 0d 01 	lds	r30, 0x010D
    1a64:	f0 91 0e 01 	lds	r31, 0x010E
    1a68:	09 95       	icall
	}
}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	ff 91       	pop	r31
    1a70:	ef 91       	pop	r30
    1a72:	bf 91       	pop	r27
    1a74:	af 91       	pop	r26
    1a76:	9f 91       	pop	r25
    1a78:	8f 91       	pop	r24
    1a7a:	7f 91       	pop	r23
    1a7c:	6f 91       	pop	r22
    1a7e:	5f 91       	pop	r21
    1a80:	4f 91       	pop	r20
    1a82:	3f 91       	pop	r19
    1a84:	2f 91       	pop	r18
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 90       	pop	r0
    1a8c:	1f 90       	pop	r1
    1a8e:	18 95       	reti

00001a90 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <Timer1_init+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	/*PUT THIS BITS AS 1 BEC. TIMER NOT WORKS WITH PWM MODE*/
	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    1a9e:	ef e4       	ldi	r30, 0x4F	; 79
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8c e0       	ldi	r24, 0x0C	; 12
    1aa4:	80 83       	st	Z, r24
	/*PUT THE PRESCALER IN FIRST 3 BITS IN TCCR1B*/
	/*AND PUT THE OTHER BITS =0*/
	TCCR1B=(Config_Ptr->prescaler);
    1aa6:	ae e4       	ldi	r26, 0x4E	; 78
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1aac:	fa 81       	ldd	r31, Y+2	; 0x02
    1aae:	84 81       	ldd	r24, Z+4	; 0x04
    1ab0:	8c 93       	st	X, r24
	/*PUT THE INITIAL VALUE*/
	TCNT1=(Config_Ptr->initial_value);
    1ab2:	ac e4       	ldi	r26, 0x4C	; 76
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aba:	80 81       	ld	r24, Z
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	11 96       	adiw	r26, 0x01	; 1
    1ac0:	9c 93       	st	X, r25
    1ac2:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==NORMAL_MODE)
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	85 81       	ldd	r24, Z+5	; 0x05
    1aca:	88 23       	and	r24, r24
    1acc:	b1 f4       	brne	.+44     	; 0x1afa <Timer1_init+0x6a>
	{
		TCCR1B &= ~(1<<WGM12) &~(1<<WGM13) &~(1<<WGM11) &~(1<<WGM10);
    1ace:	ae e4       	ldi	r26, 0x4E	; 78
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ee e4       	ldi	r30, 0x4E	; 78
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	84 7e       	andi	r24, 0xE4	; 228
    1ada:	8c 93       	st	X, r24

		/*TO ONLY ENABLE INTERRUPT OF NORMAL MODE*/
		TIMSK|=(1<<TOIE1);
    1adc:	a9 e5       	ldi	r26, 0x59	; 89
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e9 e5       	ldi	r30, 0x59	; 89
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	84 60       	ori	r24, 0x04	; 4
    1ae8:	8c 93       	st	X, r24
		TIMSK &=~(1<<OCIE1A) &~(1<<OCIE1B) &~(1<<TICIE1);
    1aea:	a9 e5       	ldi	r26, 0x59	; 89
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e9 e5       	ldi	r30, 0x59	; 89
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	87 7c       	andi	r24, 0xC7	; 199
    1af6:	8c 93       	st	X, r24
    1af8:	23 c0       	rjmp	.+70     	; 0x1b40 <Timer1_init+0xb0>

	}
	else if(Config_Ptr->mode==COMPARE_MODE)
    1afa:	e9 81       	ldd	r30, Y+1	; 0x01
    1afc:	fa 81       	ldd	r31, Y+2	; 0x02
    1afe:	85 81       	ldd	r24, Z+5	; 0x05
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	f1 f4       	brne	.+60     	; 0x1b40 <Timer1_init+0xb0>
	{

		TCCR1B|=(1<<WGM12);
    1b04:	ae e4       	ldi	r26, 0x4E	; 78
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	ee e4       	ldi	r30, 0x4E	; 78
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 60       	ori	r24, 0x08	; 8
    1b10:	8c 93       	st	X, r24
		/*TO ONLY ENABLE INTERRUPT OF COMPARE MODE*/
		TIMSK|=(1<<OCIE1A);
    1b12:	a9 e5       	ldi	r26, 0x59	; 89
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e9 e5       	ldi	r30, 0x59	; 89
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	80 61       	ori	r24, 0x10	; 16
    1b1e:	8c 93       	st	X, r24
		TIMSK &=~(1<<TOIE1) &~(1<<OCIE1B) &~(1<<TICIE1);
    1b20:	a9 e5       	ldi	r26, 0x59	; 89
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e9 e5       	ldi	r30, 0x59	; 89
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	83 7d       	andi	r24, 0xD3	; 211
    1b2c:	8c 93       	st	X, r24

		OCR1A=(Config_Ptr->compare_value);
    1b2e:	aa e4       	ldi	r26, 0x4A	; 74
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e9 81       	ldd	r30, Y+1	; 0x01
    1b34:	fa 81       	ldd	r31, Y+2	; 0x02
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	9c 93       	st	X, r25
    1b3e:	8e 93       	st	-X, r24
	}

}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <Timer1_deInit>:

void Timer1_deInit(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1b52:	ef e4       	ldi	r30, 0x4F	; 79
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	10 82       	st	Z, r1
	TCCR1B=0;
    1b58:	ee e4       	ldi	r30, 0x4E	; 78
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	10 82       	st	Z, r1
	TIMSK=0;
    1b5e:	e9 e5       	ldi	r30, 0x59	; 89
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	10 82       	st	Z, r1
	OCR1A=0;
    1b64:	ea e4       	ldi	r30, 0x4A	; 74
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	11 82       	std	Z+1, r1	; 0x01
    1b6a:	10 82       	st	Z, r1
	TCNT1=0;
    1b6c:	ec e4       	ldi	r30, 0x4C	; 76
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	11 82       	std	Z+1, r1	; 0x01
    1b72:	10 82       	st	Z, r1
	g_callBackPtr=  NULL_PTR ;
    1b74:	10 92 0e 01 	sts	0x010E, r1
    1b78:	10 92 0d 01 	sts	0x010D, r1
}
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <Timer1_setCallBack+0x6>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	90 93 0e 01 	sts	0x010E, r25
    1b98:	80 93 0d 01 	sts	0x010D, r24
}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <GPIO_setupPinDirection+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <GPIO_setupPinDirection+0x8>
    1bae:	0f 92       	push	r0
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	6a 83       	std	Y+2, r22	; 0x02
    1bb8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	88 30       	cpi	r24, 0x08	; 8
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <GPIO_setupPinDirection+0x1c>
    1bc0:	d5 c0       	rjmp	.+426    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <GPIO_setupPinDirection+0x24>
    1bc8:	d1 c0       	rjmp	.+418    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3d 83       	std	Y+5, r19	; 0x05
    1bd2:	2c 83       	std	Y+4, r18	; 0x04
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <GPIO_setupPinDirection+0x3a>
    1bde:	43 c0       	rjmp	.+134    	; 0x1c66 <GPIO_setupPinDirection+0xc0>
    1be0:	2c 81       	ldd	r18, Y+4	; 0x04
    1be2:	3d 81       	ldd	r19, Y+5	; 0x05
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <GPIO_setupPinDirection+0x4e>
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	71 f0       	breq	.+28     	; 0x1c0e <GPIO_setupPinDirection+0x68>
    1bf2:	bc c0       	rjmp	.+376    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
    1bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <GPIO_setupPinDirection+0x5a>
    1bfe:	5f c0       	rjmp	.+190    	; 0x1cbe <GPIO_setupPinDirection+0x118>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <GPIO_setupPinDirection+0x66>
    1c0a:	85 c0       	rjmp	.+266    	; 0x1d16 <GPIO_setupPinDirection+0x170>
    1c0c:	af c0       	rjmp	.+350    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	a1 f4       	brne	.+40     	; 0x1c3c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c14:	aa e3       	ldi	r26, 0x3A	; 58
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ea e3       	ldi	r30, 0x3A	; 58
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <GPIO_setupPinDirection+0x8c>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <GPIO_setupPinDirection+0x88>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	98 c0       	rjmp	.+304    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c3c:	aa e3       	ldi	r26, 0x3A	; 58
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ea e3       	ldi	r30, 0x3A	; 58
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <GPIO_setupPinDirection+0xb4>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <GPIO_setupPinDirection+0xb0>
    1c5e:	80 95       	com	r24
    1c60:	84 23       	and	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	83 c0       	rjmp	.+262    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c6c:	a7 e3       	ldi	r26, 0x37	; 55
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e7 e3       	ldi	r30, 0x37	; 55
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <GPIO_setupPinDirection+0xe4>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <GPIO_setupPinDirection+0xe0>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	6c c0       	rjmp	.+216    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c94:	a7 e3       	ldi	r26, 0x37	; 55
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e7 e3       	ldi	r30, 0x37	; 55
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_setupPinDirection+0x10c>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_setupPinDirection+0x108>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	57 c0       	rjmp	.+174    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	a1 f4       	brne	.+40     	; 0x1cec <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1cc4:	a4 e3       	ldi	r26, 0x34	; 52
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e4 e3       	ldi	r30, 0x34	; 52
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	48 2f       	mov	r20, r24
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 2e       	mov	r0, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <GPIO_setupPinDirection+0x13c>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	0a 94       	dec	r0
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <GPIO_setupPinDirection+0x138>
    1ce6:	84 2b       	or	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	40 c0       	rjmp	.+128    	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1cec:	a4 e3       	ldi	r26, 0x34	; 52
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e4 e3       	ldi	r30, 0x34	; 52
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <GPIO_setupPinDirection+0x164>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <GPIO_setupPinDirection+0x160>
    1d0e:	80 95       	com	r24
    1d10:	84 23       	and	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	2b c0       	rjmp	.+86     	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	a1 f4       	brne	.+40     	; 0x1d44 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d1c:	a1 e3       	ldi	r26, 0x31	; 49
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e1 e3       	ldi	r30, 0x31	; 49
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <GPIO_setupPinDirection+0x194>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <GPIO_setupPinDirection+0x190>
    1d3e:	84 2b       	or	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d44:	a1 e3       	ldi	r26, 0x31	; 49
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e1 e3       	ldi	r30, 0x31	; 49
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <GPIO_setupPinDirection+0x1bc>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <GPIO_setupPinDirection+0x1b8>
    1d66:	80 95       	com	r24
    1d68:	84 23       	and	r24, r20
    1d6a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <GPIO_writePin+0x6>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <GPIO_writePin+0x8>
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	6a 83       	std	Y+2, r22	; 0x02
    1d8e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	88 30       	cpi	r24, 0x08	; 8
    1d94:	08 f0       	brcs	.+2      	; 0x1d98 <GPIO_writePin+0x1c>
    1d96:	d5 c0       	rjmp	.+426    	; 0x1f42 <GPIO_writePin+0x1c6>
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	84 30       	cpi	r24, 0x04	; 4
    1d9c:	08 f0       	brcs	.+2      	; 0x1da0 <GPIO_writePin+0x24>
    1d9e:	d1 c0       	rjmp	.+418    	; 0x1f42 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	3d 83       	std	Y+5, r19	; 0x05
    1da8:	2c 83       	std	Y+4, r18	; 0x04
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9d 81       	ldd	r25, Y+5	; 0x05
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	91 05       	cpc	r25, r1
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <GPIO_writePin+0x3a>
    1db4:	43 c0       	rjmp	.+134    	; 0x1e3c <GPIO_writePin+0xc0>
    1db6:	2c 81       	ldd	r18, Y+4	; 0x04
    1db8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <GPIO_writePin+0x4e>
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	71 f0       	breq	.+28     	; 0x1de4 <GPIO_writePin+0x68>
    1dc8:	bc c0       	rjmp	.+376    	; 0x1f42 <GPIO_writePin+0x1c6>
    1dca:	2c 81       	ldd	r18, Y+4	; 0x04
    1dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dce:	22 30       	cpi	r18, 0x02	; 2
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <GPIO_writePin+0x5a>
    1dd4:	5f c0       	rjmp	.+190    	; 0x1e94 <GPIO_writePin+0x118>
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	91 05       	cpc	r25, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <GPIO_writePin+0x66>
    1de0:	85 c0       	rjmp	.+266    	; 0x1eec <GPIO_writePin+0x170>
    1de2:	af c0       	rjmp	.+350    	; 0x1f42 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	a1 f4       	brne	.+40     	; 0x1e12 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1dea:	ab e3       	ldi	r26, 0x3B	; 59
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb e3       	ldi	r30, 0x3B	; 59
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <GPIO_writePin+0x8c>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <GPIO_writePin+0x88>
    1e0c:	84 2b       	or	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	98 c0       	rjmp	.+304    	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e12:	ab e3       	ldi	r26, 0x3B	; 59
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	eb e3       	ldi	r30, 0x3B	; 59
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <GPIO_writePin+0xb4>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <GPIO_writePin+0xb0>
    1e34:	80 95       	com	r24
    1e36:	84 23       	and	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	83 c0       	rjmp	.+262    	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	81 30       	cpi	r24, 0x01	; 1
    1e40:	a1 f4       	brne	.+40     	; 0x1e6a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e42:	a8 e3       	ldi	r26, 0x38	; 56
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e8 e3       	ldi	r30, 0x38	; 56
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <GPIO_writePin+0xe4>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <GPIO_writePin+0xe0>
    1e64:	84 2b       	or	r24, r20
    1e66:	8c 93       	st	X, r24
    1e68:	6c c0       	rjmp	.+216    	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e6a:	a8 e3       	ldi	r26, 0x38	; 56
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e8 e3       	ldi	r30, 0x38	; 56
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <GPIO_writePin+0x10c>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <GPIO_writePin+0x108>
    1e8c:	80 95       	com	r24
    1e8e:	84 23       	and	r24, r20
    1e90:	8c 93       	st	X, r24
    1e92:	57 c0       	rjmp	.+174    	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	a1 f4       	brne	.+40     	; 0x1ec2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1e9a:	a5 e3       	ldi	r26, 0x35	; 53
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <GPIO_writePin+0x13c>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <GPIO_writePin+0x138>
    1ebc:	84 2b       	or	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	40 c0       	rjmp	.+128    	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ec2:	a5 e3       	ldi	r26, 0x35	; 53
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e5 e3       	ldi	r30, 0x35	; 53
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <GPIO_writePin+0x164>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <GPIO_writePin+0x160>
    1ee4:	80 95       	com	r24
    1ee6:	84 23       	and	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	2b c0       	rjmp	.+86     	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	a1 f4       	brne	.+40     	; 0x1f1a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ef2:	a2 e3       	ldi	r26, 0x32	; 50
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e2 e3       	ldi	r30, 0x32	; 50
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 2e       	mov	r0, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <GPIO_writePin+0x194>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <GPIO_writePin+0x190>
    1f14:	84 2b       	or	r24, r20
    1f16:	8c 93       	st	X, r24
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f1a:	a2 e3       	ldi	r26, 0x32	; 50
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e2 e3       	ldi	r30, 0x32	; 50
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	48 2f       	mov	r20, r24
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	02 2e       	mov	r0, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <GPIO_writePin+0x1bc>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <GPIO_writePin+0x1b8>
    1f3c:	80 95       	com	r24
    1f3e:	84 23       	and	r24, r20
    1f40:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <GPIO_readPin+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <GPIO_readPin+0x8>
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f64:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	88 30       	cpi	r24, 0x08	; 8
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <GPIO_readPin+0x1c>
    1f6c:	84 c0       	rjmp	.+264    	; 0x2076 <GPIO_readPin+0x124>
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <GPIO_readPin+0x24>
    1f74:	80 c0       	rjmp	.+256    	; 0x2076 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	3d 83       	std	Y+5, r19	; 0x05
    1f7e:	2c 83       	std	Y+4, r18	; 0x04
    1f80:	4c 81       	ldd	r20, Y+4	; 0x04
    1f82:	5d 81       	ldd	r21, Y+5	; 0x05
    1f84:	41 30       	cpi	r20, 0x01	; 1
    1f86:	51 05       	cpc	r21, r1
    1f88:	79 f1       	breq	.+94     	; 0x1fe8 <GPIO_readPin+0x96>
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	34 f4       	brge	.+12     	; 0x1fa0 <GPIO_readPin+0x4e>
    1f94:	2c 81       	ldd	r18, Y+4	; 0x04
    1f96:	3d 81       	ldd	r19, Y+5	; 0x05
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <GPIO_readPin+0x66>
    1f9e:	6b c0       	rjmp	.+214    	; 0x2076 <GPIO_readPin+0x124>
    1fa0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fa4:	42 30       	cpi	r20, 0x02	; 2
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	b9 f1       	breq	.+110    	; 0x2018 <GPIO_readPin+0xc6>
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <GPIO_readPin+0x64>
    1fb4:	49 c0       	rjmp	.+146    	; 0x2048 <GPIO_readPin+0xf6>
    1fb6:	5f c0       	rjmp	.+190    	; 0x2076 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1fb8:	e9 e3       	ldi	r30, 0x39	; 57
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a9 01       	movw	r20, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <GPIO_readPin+0x7e>
    1fcc:	55 95       	asr	r21
    1fce:	47 95       	ror	r20
    1fd0:	8a 95       	dec	r24
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <GPIO_readPin+0x7a>
    1fd4:	ca 01       	movw	r24, r20
    1fd6:	81 70       	andi	r24, 0x01	; 1
    1fd8:	90 70       	andi	r25, 0x00	; 0
    1fda:	88 23       	and	r24, r24
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	49 c0       	rjmp	.+146    	; 0x2076 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fe4:	19 82       	std	Y+1, r1	; 0x01
    1fe6:	47 c0       	rjmp	.+142    	; 0x2076 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1fe8:	e6 e3       	ldi	r30, 0x36	; 54
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <GPIO_readPin+0xae>
    1ffc:	55 95       	asr	r21
    1ffe:	47 95       	ror	r20
    2000:	8a 95       	dec	r24
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <GPIO_readPin+0xaa>
    2004:	ca 01       	movw	r24, r20
    2006:	81 70       	andi	r24, 0x01	; 1
    2008:	90 70       	andi	r25, 0x00	; 0
    200a:	88 23       	and	r24, r24
    200c:	19 f0       	breq	.+6      	; 0x2014 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	31 c0       	rjmp	.+98     	; 0x2076 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2014:	19 82       	std	Y+1, r1	; 0x01
    2016:	2f c0       	rjmp	.+94     	; 0x2076 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2018:	e3 e3       	ldi	r30, 0x33	; 51
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a9 01       	movw	r20, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <GPIO_readPin+0xde>
    202c:	55 95       	asr	r21
    202e:	47 95       	ror	r20
    2030:	8a 95       	dec	r24
    2032:	e2 f7       	brpl	.-8      	; 0x202c <GPIO_readPin+0xda>
    2034:	ca 01       	movw	r24, r20
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	88 23       	and	r24, r24
    203c:	19 f0       	breq	.+6      	; 0x2044 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	19 c0       	rjmp	.+50     	; 0x2076 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2044:	19 82       	std	Y+1, r1	; 0x01
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2048:	e0 e3       	ldi	r30, 0x30	; 48
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a9 01       	movw	r20, r18
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <GPIO_readPin+0x10e>
    205c:	55 95       	asr	r21
    205e:	47 95       	ror	r20
    2060:	8a 95       	dec	r24
    2062:	e2 f7       	brpl	.-8      	; 0x205c <GPIO_readPin+0x10a>
    2064:	ca 01       	movw	r24, r20
    2066:	81 70       	andi	r24, 0x01	; 1
    2068:	90 70       	andi	r25, 0x00	; 0
    206a:	88 23       	and	r24, r24
    206c:	19 f0       	breq	.+6      	; 0x2074 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2074:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <GPIO_setupPortDirection+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <GPIO_setupPortDirection+0x8>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	90 f5       	brcc	.+100    	; 0x2102 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3c 83       	std	Y+4, r19	; 0x04
    20a6:	2b 83       	std	Y+3, r18	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	d1 f0       	breq	.+52     	; 0x20e6 <GPIO_setupPortDirection+0x5e>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <GPIO_setupPortDirection+0x3e>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f0       	breq	.+24     	; 0x20dc <GPIO_setupPortDirection+0x54>
    20c4:	1e c0       	rjmp	.+60     	; 0x2102 <GPIO_setupPortDirection+0x7a>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	81 f0       	breq	.+32     	; 0x20f0 <GPIO_setupPortDirection+0x68>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <GPIO_setupPortDirection+0x72>
    20da:	13 c0       	rjmp	.+38     	; 0x2102 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20dc:	ea e3       	ldi	r30, 0x3A	; 58
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	80 83       	st	Z, r24
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20e6:	e7 e3       	ldi	r30, 0x37	; 55
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	80 83       	st	Z, r24
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20f0:	e4 e3       	ldi	r30, 0x34	; 52
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	80 83       	st	Z, r24
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    20fa:	e1 e3       	ldi	r30, 0x31	; 49
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 83       	st	Z, r24
			break;
		}
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <GPIO_writePort+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <GPIO_writePort+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	84 30       	cpi	r24, 0x04	; 4
    2124:	90 f5       	brcc	.+100    	; 0x218a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3c 83       	std	Y+4, r19	; 0x04
    212e:	2b 83       	std	Y+3, r18	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	91 05       	cpc	r25, r1
    2138:	d1 f0       	breq	.+52     	; 0x216e <GPIO_writePort+0x5e>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	2c f4       	brge	.+10     	; 0x214e <GPIO_writePort+0x3e>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	61 f0       	breq	.+24     	; 0x2164 <GPIO_writePort+0x54>
    214c:	1e c0       	rjmp	.+60     	; 0x218a <GPIO_writePort+0x7a>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	81 f0       	breq	.+32     	; 0x2178 <GPIO_writePort+0x68>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	91 05       	cpc	r25, r1
    2160:	81 f0       	breq	.+32     	; 0x2182 <GPIO_writePort+0x72>
    2162:	13 c0       	rjmp	.+38     	; 0x218a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2164:	eb e3       	ldi	r30, 0x3B	; 59
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	80 83       	st	Z, r24
    216c:	0e c0       	rjmp	.+28     	; 0x218a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    216e:	e8 e3       	ldi	r30, 0x38	; 56
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	80 83       	st	Z, r24
    2176:	09 c0       	rjmp	.+18     	; 0x218a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2178:	e5 e3       	ldi	r30, 0x35	; 53
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 83       	st	Z, r24
    2180:	04 c0       	rjmp	.+8      	; 0x218a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2182:	e2 e3       	ldi	r30, 0x32	; 50
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	80 83       	st	Z, r24
			break;
		}
	}
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <GPIO_readPort+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <GPIO_readPort+0x8>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    21a6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	90 f5       	brcc	.+100    	; 0x2212 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3c 83       	std	Y+4, r19	; 0x04
    21b6:	2b 83       	std	Y+3, r18	; 0x03
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	91 05       	cpc	r25, r1
    21c0:	d1 f0       	breq	.+52     	; 0x21f6 <GPIO_readPort+0x5e>
    21c2:	2b 81       	ldd	r18, Y+3	; 0x03
    21c4:	3c 81       	ldd	r19, Y+4	; 0x04
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <GPIO_readPort+0x3e>
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	61 f0       	breq	.+24     	; 0x21ec <GPIO_readPort+0x54>
    21d4:	1e c0       	rjmp	.+60     	; 0x2212 <GPIO_readPort+0x7a>
    21d6:	2b 81       	ldd	r18, Y+3	; 0x03
    21d8:	3c 81       	ldd	r19, Y+4	; 0x04
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	81 f0       	breq	.+32     	; 0x2200 <GPIO_readPort+0x68>
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	83 30       	cpi	r24, 0x03	; 3
    21e6:	91 05       	cpc	r25, r1
    21e8:	81 f0       	breq	.+32     	; 0x220a <GPIO_readPort+0x72>
    21ea:	13 c0       	rjmp	.+38     	; 0x2212 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21ec:	e9 e3       	ldi	r30, 0x39	; 57
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	0e c0       	rjmp	.+28     	; 0x2212 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    21f6:	e6 e3       	ldi	r30, 0x36	; 54
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	09 c0       	rjmp	.+18     	; 0x2212 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2200:	e3 e3       	ldi	r30, 0x33	; 51
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	04 c0       	rjmp	.+8      	; 0x2212 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    220a:	e0 e3       	ldi	r30, 0x30	; 48
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	60 97       	sbiw	r28, 0x10	; 16
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	61 e0       	ldi	r22, 0x01	; 1
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	62 e0       	ldi	r22, 0x02	; 2
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	63 e0       	ldi	r22, 0x03	; 3
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	64 e0       	ldi	r22, 0x04	; 4
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	65 e0       	ldi	r22, 0x05	; 5
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	66 e0       	ldi	r22, 0x06	; 6
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	67 e0       	ldi	r22, 0x07	; 7
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2286:	1f 86       	std	Y+15, r1	; 0x0f
    2288:	ab c0       	rjmp	.+342    	; 0x23e0 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	6f 85       	ldd	r22, Y+15	; 0x0f
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	6f 85       	ldd	r22, Y+15	; 0x0f
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    229e:	18 8a       	std	Y+16, r1	; 0x10
    22a0:	22 c0       	rjmp	.+68     	; 0x22e6 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    22a2:	88 89       	ldd	r24, Y+16	; 0x10
    22a4:	98 2f       	mov	r25, r24
    22a6:	9c 5f       	subi	r25, 0xFC	; 252
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	69 2f       	mov	r22, r25
    22ac:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <GPIO_readPin>
    22b0:	88 23       	and	r24, r24
    22b2:	b1 f4       	brne	.+44     	; 0x22e0 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	98 2f       	mov	r25, r24
    22c4:	88 89       	ldd	r24, Y+16	; 0x10
    22c6:	89 0f       	add	r24, r25
    22c8:	8f 5f       	subi	r24, 0xFF	; 255
    22ca:	0e 94 f5 11 	call	0x23ea	; 0x23ea <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    22ce:	60 96       	adiw	r28, 0x10	; 16
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    22e0:	88 89       	ldd	r24, Y+16	; 0x10
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	88 8b       	std	Y+16, r24	; 0x10
    22e6:	88 89       	ldd	r24, Y+16	; 0x10
    22e8:	84 30       	cpi	r24, 0x04	; 4
    22ea:	d8 f2       	brcs	.-74     	; 0x22a2 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 ea       	ldi	r26, 0xA0	; 160
    22fc:	b0 e4       	ldi	r27, 0x40	; 64
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <KEYPAD_getPressedKey+0x186>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <KEYPAD_getPressedKey+0x174>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <KEYPAD_getPressedKey+0x168>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <KEYPAD_getPressedKey+0x1b0>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    23da:	8f 85       	ldd	r24, Y+15	; 0x0f
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	8f 87       	std	Y+15, r24	; 0x0f
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	08 f4       	brcc	.+2      	; 0x23e8 <KEYPAD_getPressedKey+0x1c6>
    23e6:	51 cf       	rjmp	.-350    	; 0x228a <KEYPAD_getPressedKey+0x68>
    23e8:	4e cf       	rjmp	.-356    	; 0x2286 <KEYPAD_getPressedKey+0x64>

000023ea <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    23f8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	3c 83       	std	Y+4, r19	; 0x04
    2402:	2b 83       	std	Y+3, r18	; 0x03
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	88 30       	cpi	r24, 0x08	; 8
    240a:	91 05       	cpc	r25, r1
    240c:	09 f4       	brne	.+2      	; 0x2410 <KEYPAD_4x4_adjustKeyNumber+0x26>
    240e:	70 c0       	rjmp	.+224    	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2410:	2b 81       	ldd	r18, Y+3	; 0x03
    2412:	3c 81       	ldd	r19, Y+4	; 0x04
    2414:	29 30       	cpi	r18, 0x09	; 9
    2416:	31 05       	cpc	r19, r1
    2418:	5c f5       	brge	.+86     	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x86>
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	84 30       	cpi	r24, 0x04	; 4
    2420:	91 05       	cpc	r25, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2424:	59 c0       	rjmp	.+178    	; 0x24d8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2426:	2b 81       	ldd	r18, Y+3	; 0x03
    2428:	3c 81       	ldd	r19, Y+4	; 0x04
    242a:	25 30       	cpi	r18, 0x05	; 5
    242c:	31 05       	cpc	r19, r1
    242e:	9c f4       	brge	.+38     	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	91 05       	cpc	r25, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <KEYPAD_4x4_adjustKeyNumber+0x52>
    243a:	48 c0       	rjmp	.+144    	; 0x24cc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    243c:	2b 81       	ldd	r18, Y+3	; 0x03
    243e:	3c 81       	ldd	r19, Y+4	; 0x04
    2440:	23 30       	cpi	r18, 0x03	; 3
    2442:	31 05       	cpc	r19, r1
    2444:	0c f0       	brlt	.+2      	; 0x2448 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2446:	45 c0       	rjmp	.+138    	; 0x24d2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	91 05       	cpc	r25, r1
    2450:	09 f4       	brne	.+2      	; 0x2454 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2452:	39 c0       	rjmp	.+114    	; 0x24c6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2454:	67 c0       	rjmp	.+206    	; 0x2524 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2456:	2b 81       	ldd	r18, Y+3	; 0x03
    2458:	3c 81       	ldd	r19, Y+4	; 0x04
    245a:	26 30       	cpi	r18, 0x06	; 6
    245c:	31 05       	cpc	r19, r1
    245e:	09 f4       	brne	.+2      	; 0x2462 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2460:	41 c0       	rjmp	.+130    	; 0x24e4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	87 30       	cpi	r24, 0x07	; 7
    2468:	91 05       	cpc	r25, r1
    246a:	0c f0       	brlt	.+2      	; 0x246e <KEYPAD_4x4_adjustKeyNumber+0x84>
    246c:	3e c0       	rjmp	.+124    	; 0x24ea <KEYPAD_4x4_adjustKeyNumber+0x100>
    246e:	37 c0       	rjmp	.+110    	; 0x24de <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2470:	2b 81       	ldd	r18, Y+3	; 0x03
    2472:	3c 81       	ldd	r19, Y+4	; 0x04
    2474:	2c 30       	cpi	r18, 0x0C	; 12
    2476:	31 05       	cpc	r19, r1
    2478:	09 f4       	brne	.+2      	; 0x247c <KEYPAD_4x4_adjustKeyNumber+0x92>
    247a:	46 c0       	rjmp	.+140    	; 0x2508 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	8d 30       	cpi	r24, 0x0D	; 13
    2482:	91 05       	cpc	r25, r1
    2484:	5c f4       	brge	.+22     	; 0x249c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2486:	2b 81       	ldd	r18, Y+3	; 0x03
    2488:	3c 81       	ldd	r19, Y+4	; 0x04
    248a:	2a 30       	cpi	r18, 0x0A	; 10
    248c:	31 05       	cpc	r19, r1
    248e:	b1 f1       	breq	.+108    	; 0x24fc <KEYPAD_4x4_adjustKeyNumber+0x112>
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	8b 30       	cpi	r24, 0x0B	; 11
    2496:	91 05       	cpc	r25, r1
    2498:	a4 f5       	brge	.+104    	; 0x2502 <KEYPAD_4x4_adjustKeyNumber+0x118>
    249a:	2d c0       	rjmp	.+90     	; 0x24f6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	2e 30       	cpi	r18, 0x0E	; 14
    24a2:	31 05       	cpc	r19, r1
    24a4:	b9 f1       	breq	.+110    	; 0x2514 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	8e 30       	cpi	r24, 0x0E	; 14
    24ac:	91 05       	cpc	r25, r1
    24ae:	7c f1       	brlt	.+94     	; 0x250e <KEYPAD_4x4_adjustKeyNumber+0x124>
    24b0:	2b 81       	ldd	r18, Y+3	; 0x03
    24b2:	3c 81       	ldd	r19, Y+4	; 0x04
    24b4:	2f 30       	cpi	r18, 0x0F	; 15
    24b6:	31 05       	cpc	r19, r1
    24b8:	79 f1       	breq	.+94     	; 0x2518 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	80 31       	cpi	r24, 0x10	; 16
    24c0:	91 05       	cpc	r25, r1
    24c2:	69 f1       	breq	.+90     	; 0x251e <KEYPAD_4x4_adjustKeyNumber+0x134>
    24c4:	2f c0       	rjmp	.+94     	; 0x2524 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    24c6:	87 e0       	ldi	r24, 0x07	; 7
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	2e c0       	rjmp	.+92     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    24cc:	88 e0       	ldi	r24, 0x08	; 8
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	2b c0       	rjmp	.+86     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    24d2:	89 e0       	ldi	r24, 0x09	; 9
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	28 c0       	rjmp	.+80     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    24d8:	85 e2       	ldi	r24, 0x25	; 37
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	25 c0       	rjmp	.+74     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    24de:	84 e0       	ldi	r24, 0x04	; 4
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	22 c0       	rjmp	.+68     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    24e4:	85 e0       	ldi	r24, 0x05	; 5
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	1f c0       	rjmp	.+62     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    24ea:	86 e0       	ldi	r24, 0x06	; 6
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	1c c0       	rjmp	.+56     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    24f0:	8a e2       	ldi	r24, 0x2A	; 42
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	19 c0       	rjmp	.+50     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	16 c0       	rjmp	.+44     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	13 c0       	rjmp	.+38     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	10 c0       	rjmp	.+32     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2508:	8d e2       	ldi	r24, 0x2D	; 45
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	0d c0       	rjmp	.+26     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    250e:	8d e0       	ldi	r24, 0x0D	; 13
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	0a c0       	rjmp	.+20     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2514:	19 82       	std	Y+1, r1	; 0x01
    2516:	08 c0       	rjmp	.+16     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2518:	8d e3       	ldi	r24, 0x3D	; 61
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    251e:	8b e2       	ldi	r24, 0x2B	; 43
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
} 
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	2e 97       	sbiw	r28, 0x0e	; 14
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	66 e0       	ldi	r22, 0x06	; 6
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	67 e0       	ldi	r22, 0x07	; 7
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <GPIO_setupPinDirection>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 ea       	ldi	r26, 0xA0	; 160
    2566:	b1 e4       	ldi	r27, 0x41	; 65
    2568:	8b 87       	std	Y+11, r24	; 0x0b
    256a:	9c 87       	std	Y+12, r25	; 0x0c
    256c:	ad 87       	std	Y+13, r26	; 0x0d
    256e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2570:	6b 85       	ldd	r22, Y+11	; 0x0b
    2572:	7c 85       	ldd	r23, Y+12	; 0x0c
    2574:	8d 85       	ldd	r24, Y+13	; 0x0d
    2576:	9e 85       	ldd	r25, Y+14	; 0x0e
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a ef       	ldi	r20, 0xFA	; 250
    257e:	54 e4       	ldi	r21, 0x44	; 68
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8f 83       	std	Y+7, r24	; 0x07
    258a:	98 87       	std	Y+8, r25	; 0x08
    258c:	a9 87       	std	Y+9, r26	; 0x09
    258e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2590:	6f 81       	ldd	r22, Y+7	; 0x07
    2592:	78 85       	ldd	r23, Y+8	; 0x08
    2594:	89 85       	ldd	r24, Y+9	; 0x09
    2596:	9a 85       	ldd	r25, Y+10	; 0x0a
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	2c f4       	brge	.+10     	; 0x25b2 <LCD_init+0x7a>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
    25b0:	3f c0       	rjmp	.+126    	; 0x2630 <LCD_init+0xf8>
	else if (__tmp > 65535)
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	3f ef       	ldi	r19, 0xFF	; 255
    25be:	4f e7       	ldi	r20, 0x7F	; 127
    25c0:	57 e4       	ldi	r21, 0x47	; 71
    25c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c6:	18 16       	cp	r1, r24
    25c8:	4c f5       	brge	.+82     	; 0x261c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    25cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e2       	ldi	r20, 0x20	; 32
    25d8:	51 e4       	ldi	r21, 0x41	; 65
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9e 83       	std	Y+6, r25	; 0x06
    25f0:	8d 83       	std	Y+5, r24	; 0x05
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <LCD_init+0xda>
    25f4:	88 ec       	ldi	r24, 0xC8	; 200
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_init+0xc8>
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	8d 81       	ldd	r24, Y+5	; 0x05
    2614:	9e 81       	ldd	r25, Y+6	; 0x06
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	69 f7       	brne	.-38     	; 0x25f4 <LCD_init+0xbc>
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261c:	6f 81       	ldd	r22, Y+7	; 0x07
    261e:	78 85       	ldd	r23, Y+8	; 0x08
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	9a 85       	ldd	r25, Y+10	; 0x0a
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_init+0x104>
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	6f ef       	ldi	r22, 0xFF	; 255
    2648:	0e 94 44 10 	call	0x2088	; 0x2088 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    264c:	88 e3       	ldi	r24, 0x38	; 56
    264e:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2652:	8c e0       	ldi	r24, 0x0C	; 12
    2654:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_sendCommand>
}
    265e:	2e 96       	adiw	r28, 0x0e	; 14
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	e9 97       	sbiw	r28, 0x39	; 57
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	66 e0       	ldi	r22, 0x06	; 6
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 e8       	ldi	r26, 0x80	; 128
    2696:	bf e3       	ldi	r27, 0x3F	; 63
    2698:	8d ab       	std	Y+53, r24	; 0x35
    269a:	9e ab       	std	Y+54, r25	; 0x36
    269c:	af ab       	std	Y+55, r26	; 0x37
    269e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6d a9       	ldd	r22, Y+53	; 0x35
    26a2:	7e a9       	ldd	r23, Y+54	; 0x36
    26a4:	8f a9       	ldd	r24, Y+55	; 0x37
    26a6:	98 ad       	ldd	r25, Y+56	; 0x38
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a ef       	ldi	r20, 0xFA	; 250
    26ae:	54 e4       	ldi	r21, 0x44	; 68
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	89 ab       	std	Y+49, r24	; 0x31
    26ba:	9a ab       	std	Y+50, r25	; 0x32
    26bc:	ab ab       	std	Y+51, r26	; 0x33
    26be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26c0:	69 a9       	ldd	r22, Y+49	; 0x31
    26c2:	7a a9       	ldd	r23, Y+50	; 0x32
    26c4:	8b a9       	ldd	r24, Y+51	; 0x33
    26c6:	9c a9       	ldd	r25, Y+52	; 0x34
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <LCD_sendCommand+0x72>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    26e2:	69 a9       	ldd	r22, Y+49	; 0x31
    26e4:	7a a9       	ldd	r23, Y+50	; 0x32
    26e6:	8b a9       	ldd	r24, Y+51	; 0x33
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6d a9       	ldd	r22, Y+53	; 0x35
    26fc:	7e a9       	ldd	r23, Y+54	; 0x36
    26fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2700:	98 ad       	ldd	r25, Y+56	; 0x38
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	98 ab       	std	Y+48, r25	; 0x30
    2720:	8f a7       	std	Y+47, r24	; 0x2f
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <LCD_sendCommand+0xd2>
    2724:	88 ec       	ldi	r24, 0xC8	; 200
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e a7       	std	Y+46, r25	; 0x2e
    272a:	8d a7       	std	Y+45, r24	; 0x2d
    272c:	8d a5       	ldd	r24, Y+45	; 0x2d
    272e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_sendCommand+0xc0>
    2734:	9e a7       	std	Y+46, r25	; 0x2e
    2736:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8f a5       	ldd	r24, Y+47	; 0x2f
    273a:	98 a9       	ldd	r25, Y+48	; 0x30
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	98 ab       	std	Y+48, r25	; 0x30
    2740:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8f a5       	ldd	r24, Y+47	; 0x2f
    2744:	98 a9       	ldd	r25, Y+48	; 0x30
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <LCD_sendCommand+0xb4>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	69 a9       	ldd	r22, Y+49	; 0x31
    274e:	7a a9       	ldd	r23, Y+50	; 0x32
    2750:	8b a9       	ldd	r24, Y+51	; 0x33
    2752:	9c a9       	ldd	r25, Y+52	; 0x34
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	98 ab       	std	Y+48, r25	; 0x30
    275e:	8f a7       	std	Y+47, r24	; 0x2f
    2760:	8f a5       	ldd	r24, Y+47	; 0x2f
    2762:	98 a9       	ldd	r25, Y+48	; 0x30
    2764:	9c a7       	std	Y+44, r25	; 0x2c
    2766:	8b a7       	std	Y+43, r24	; 0x2b
    2768:	8b a5       	ldd	r24, Y+43	; 0x2b
    276a:	9c a5       	ldd	r25, Y+44	; 0x2c
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <LCD_sendCommand+0xfc>
    2770:	9c a7       	std	Y+44, r25	; 0x2c
    2772:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	67 e0       	ldi	r22, 0x07	; 7
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	a0 e8       	ldi	r26, 0x80	; 128
    2784:	bf e3       	ldi	r27, 0x3F	; 63
    2786:	8f a3       	std	Y+39, r24	; 0x27
    2788:	98 a7       	std	Y+40, r25	; 0x28
    278a:	a9 a7       	std	Y+41, r26	; 0x29
    278c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	6f a1       	ldd	r22, Y+39	; 0x27
    2790:	78 a5       	ldd	r23, Y+40	; 0x28
    2792:	89 a5       	ldd	r24, Y+41	; 0x29
    2794:	9a a5       	ldd	r25, Y+42	; 0x2a
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a ef       	ldi	r20, 0xFA	; 250
    279c:	54 e4       	ldi	r21, 0x44	; 68
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	8b a3       	std	Y+35, r24	; 0x23
    27a8:	9c a3       	std	Y+36, r25	; 0x24
    27aa:	ad a3       	std	Y+37, r26	; 0x25
    27ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <LCD_sendCommand+0x160>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9a a3       	std	Y+34, r25	; 0x22
    27cc:	89 a3       	std	Y+33, r24	; 0x21
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    27d0:	6b a1       	ldd	r22, Y+35	; 0x23
    27d2:	7c a1       	ldd	r23, Y+36	; 0x24
    27d4:	8d a1       	ldd	r24, Y+37	; 0x25
    27d6:	9e a1       	ldd	r25, Y+38	; 0x26
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	6f a1       	ldd	r22, Y+39	; 0x27
    27ea:	78 a5       	ldd	r23, Y+40	; 0x28
    27ec:	89 a5       	ldd	r24, Y+41	; 0x29
    27ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9a a3       	std	Y+34, r25	; 0x22
    280e:	89 a3       	std	Y+33, r24	; 0x21
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <LCD_sendCommand+0x1c0>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	98 a3       	std	Y+32, r25	; 0x20
    2818:	8f 8f       	std	Y+31, r24	; 0x1f
    281a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    281c:	98 a1       	ldd	r25, Y+32	; 0x20
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_sendCommand+0x1ae>
    2822:	98 a3       	std	Y+32, r25	; 0x20
    2824:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	89 a1       	ldd	r24, Y+33	; 0x21
    2828:	9a a1       	ldd	r25, Y+34	; 0x22
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9a a3       	std	Y+34, r25	; 0x22
    282e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	89 a1       	ldd	r24, Y+33	; 0x21
    2832:	9a a1       	ldd	r25, Y+34	; 0x22
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <LCD_sendCommand+0x1a2>
    2838:	14 c0       	rjmp	.+40     	; 0x2862 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	6b a1       	ldd	r22, Y+35	; 0x23
    283c:	7c a1       	ldd	r23, Y+36	; 0x24
    283e:	8d a1       	ldd	r24, Y+37	; 0x25
    2840:	9e a1       	ldd	r25, Y+38	; 0x26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9a a3       	std	Y+34, r25	; 0x22
    284c:	89 a3       	std	Y+33, r24	; 0x21
    284e:	89 a1       	ldd	r24, Y+33	; 0x21
    2850:	9a a1       	ldd	r25, Y+34	; 0x22
    2852:	9e 8f       	std	Y+30, r25	; 0x1e
    2854:	8d 8f       	std	Y+29, r24	; 0x1d
    2856:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2858:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_sendCommand+0x1ea>
    285e:	9e 8f       	std	Y+30, r25	; 0x1e
    2860:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	69 ad       	ldd	r22, Y+57	; 0x39
    2866:	0e 94 88 10 	call	0x2110	; 0x2110 <GPIO_writePort>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	89 8f       	std	Y+25, r24	; 0x19
    2874:	9a 8f       	std	Y+26, r25	; 0x1a
    2876:	ab 8f       	std	Y+27, r26	; 0x1b
    2878:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	69 8d       	ldd	r22, Y+25	; 0x19
    287c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    287e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a ef       	ldi	r20, 0xFA	; 250
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8d 8b       	std	Y+21, r24	; 0x15
    2894:	9e 8b       	std	Y+22, r25	; 0x16
    2896:	af 8b       	std	Y+23, r26	; 0x17
    2898:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289a:	6d 89       	ldd	r22, Y+21	; 0x15
    289c:	7e 89       	ldd	r23, Y+22	; 0x16
    289e:	8f 89       	ldd	r24, Y+23	; 0x17
    28a0:	98 8d       	ldd	r25, Y+24	; 0x18
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <LCD_sendCommand+0x24c>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	69 8d       	ldd	r22, Y+25	; 0x19
    28d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9c 8b       	std	Y+20, r25	; 0x14
    28fa:	8b 8b       	std	Y+19, r24	; 0x13
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <LCD_sendCommand+0x2ac>
    28fe:	88 ec       	ldi	r24, 0xC8	; 200
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9a 8b       	std	Y+18, r25	; 0x12
    2904:	89 8b       	std	Y+17, r24	; 0x11
    2906:	89 89       	ldd	r24, Y+17	; 0x11
    2908:	9a 89       	ldd	r25, Y+18	; 0x12
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <LCD_sendCommand+0x29a>
    290e:	9a 8b       	std	Y+18, r25	; 0x12
    2910:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	8b 89       	ldd	r24, Y+19	; 0x13
    2914:	9c 89       	ldd	r25, Y+20	; 0x14
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9c 8b       	std	Y+20, r25	; 0x14
    291a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <LCD_sendCommand+0x28e>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	6d 89       	ldd	r22, Y+21	; 0x15
    2928:	7e 89       	ldd	r23, Y+22	; 0x16
    292a:	8f 89       	ldd	r24, Y+23	; 0x17
    292c:	98 8d       	ldd	r25, Y+24	; 0x18
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9c 8b       	std	Y+20, r25	; 0x14
    2938:	8b 8b       	std	Y+19, r24	; 0x13
    293a:	8b 89       	ldd	r24, Y+19	; 0x13
    293c:	9c 89       	ldd	r25, Y+20	; 0x14
    293e:	98 8b       	std	Y+16, r25	; 0x10
    2940:	8f 87       	std	Y+15, r24	; 0x0f
    2942:	8f 85       	ldd	r24, Y+15	; 0x0f
    2944:	98 89       	ldd	r25, Y+16	; 0x10
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <LCD_sendCommand+0x2d6>
    294a:	98 8b       	std	Y+16, r25	; 0x10
    294c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	67 e0       	ldi	r22, 0x07	; 7
    2952:	40 e0       	ldi	r20, 0x00	; 0
    2954:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e8       	ldi	r26, 0x80	; 128
    295e:	bf e3       	ldi	r27, 0x3F	; 63
    2960:	8b 87       	std	Y+11, r24	; 0x0b
    2962:	9c 87       	std	Y+12, r25	; 0x0c
    2964:	ad 87       	std	Y+13, r26	; 0x0d
    2966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	4a ef       	ldi	r20, 0xFA	; 250
    2976:	54 e4       	ldi	r21, 0x44	; 68
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	8f 83       	std	Y+7, r24	; 0x07
    2982:	98 87       	std	Y+8, r25	; 0x08
    2984:	a9 87       	std	Y+9, r26	; 0x09
    2986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	2c f4       	brge	.+10     	; 0x29aa <LCD_sendCommand+0x33a>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	3f ef       	ldi	r19, 0xFF	; 255
    29b6:	4f e7       	ldi	r20, 0x7F	; 127
    29b8:	57 e4       	ldi	r21, 0x47	; 71
    29ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	0f c0       	rjmp	.+30     	; 0x2a0a <LCD_sendCommand+0x39a>
    29ec:	88 ec       	ldi	r24, 0xC8	; 200
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_sendCommand+0x388>
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	9e 81       	ldd	r25, Y+6	; 0x06
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f7       	brne	.-38     	; 0x29ec <LCD_sendCommand+0x37c>
    2a12:	14 c0       	rjmp	.+40     	; 0x2a3c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	9a 81       	ldd	r25, Y+2	; 0x02
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_sendCommand+0x3c4>
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a3c:	e9 96       	adiw	r28, 0x39	; 57
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	e9 97       	sbiw	r28, 0x39	; 57
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	66 e0       	ldi	r22, 0x06	; 6
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e8       	ldi	r26, 0x80	; 128
    2a74:	bf e3       	ldi	r27, 0x3F	; 63
    2a76:	8d ab       	std	Y+53, r24	; 0x35
    2a78:	9e ab       	std	Y+54, r25	; 0x36
    2a7a:	af ab       	std	Y+55, r26	; 0x37
    2a7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a80:	7e a9       	ldd	r23, Y+54	; 0x36
    2a82:	8f a9       	ldd	r24, Y+55	; 0x37
    2a84:	98 ad       	ldd	r25, Y+56	; 0x38
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	89 ab       	std	Y+49, r24	; 0x31
    2a98:	9a ab       	std	Y+50, r25	; 0x32
    2a9a:	ab ab       	std	Y+51, r26	; 0x33
    2a9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	98 ab       	std	Y+48, r25	; 0x30
    2abc:	8f a7       	std	Y+47, r24	; 0x2f
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ada:	7e a9       	ldd	r23, Y+54	; 0x36
    2adc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ade:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	98 ab       	std	Y+48, r25	; 0x30
    2afe:	8f a7       	std	Y+47, r24	; 0x2f
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <LCD_displayCharacter+0xd2>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e a7       	std	Y+46, r25	; 0x2e
    2b08:	8d a7       	std	Y+45, r24	; 0x2d
    2b0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_displayCharacter+0xc0>
    2b12:	9e a7       	std	Y+46, r25	; 0x2e
    2b14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b18:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	98 ab       	std	Y+48, r25	; 0x30
    2b1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b22:	98 a9       	ldd	r25, Y+48	; 0x30
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <LCD_displayCharacter+0xb4>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b30:	9c a9       	ldd	r25, Y+52	; 0x34
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	9c a7       	std	Y+44, r25	; 0x2c
    2b44:	8b a7       	std	Y+43, r24	; 0x2b
    2b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_displayCharacter+0xfc>
    2b4e:	9c a7       	std	Y+44, r25	; 0x2c
    2b50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	67 e0       	ldi	r22, 0x07	; 7
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 e8       	ldi	r26, 0x80	; 128
    2b62:	bf e3       	ldi	r27, 0x3F	; 63
    2b64:	8f a3       	std	Y+39, r24	; 0x27
    2b66:	98 a7       	std	Y+40, r25	; 0x28
    2b68:	a9 a7       	std	Y+41, r26	; 0x29
    2b6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b6e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b70:	89 a5       	ldd	r24, Y+41	; 0x29
    2b72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a ef       	ldi	r20, 0xFA	; 250
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8b a3       	std	Y+35, r24	; 0x23
    2b86:	9c a3       	std	Y+36, r25	; 0x24
    2b88:	ad a3       	std	Y+37, r26	; 0x25
    2b8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b90:	8d a1       	ldd	r24, Y+37	; 0x25
    2b92:	9e a1       	ldd	r25, Y+38	; 0x26
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <LCD_displayCharacter+0x160>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9a a3       	std	Y+34, r25	; 0x22
    2baa:	89 a3       	std	Y+33, r24	; 0x21
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2bae:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bca:	89 a5       	ldd	r24, Y+41	; 0x29
    2bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9a a3       	std	Y+34, r25	; 0x22
    2bec:	89 a3       	std	Y+33, r24	; 0x21
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <LCD_displayCharacter+0x1c0>
    2bf0:	88 ec       	ldi	r24, 0xC8	; 200
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	98 a3       	std	Y+32, r25	; 0x20
    2bf6:	8f 8f       	std	Y+31, r24	; 0x1f
    2bf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bfa:	98 a1       	ldd	r25, Y+32	; 0x20
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_displayCharacter+0x1ae>
    2c00:	98 a3       	std	Y+32, r25	; 0x20
    2c02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	89 a1       	ldd	r24, Y+33	; 0x21
    2c06:	9a a1       	ldd	r25, Y+34	; 0x22
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9a a3       	std	Y+34, r25	; 0x22
    2c0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c10:	9a a1       	ldd	r25, Y+34	; 0x22
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <LCD_displayCharacter+0x1a2>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	6b a1       	ldd	r22, Y+35	; 0x23
    2c1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9a a3       	std	Y+34, r25	; 0x22
    2c2a:	89 a3       	std	Y+33, r24	; 0x21
    2c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c30:	9e 8f       	std	Y+30, r25	; 0x1e
    2c32:	8d 8f       	std	Y+29, r24	; 0x1d
    2c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <LCD_displayCharacter+0x1ea>
    2c3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	69 ad       	ldd	r22, Y+57	; 0x39
    2c44:	0e 94 88 10 	call	0x2110	; 0x2110 <GPIO_writePort>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a0 e8       	ldi	r26, 0x80	; 128
    2c4e:	bf e3       	ldi	r27, 0x3F	; 63
    2c50:	89 8f       	std	Y+25, r24	; 0x19
    2c52:	9a 8f       	std	Y+26, r25	; 0x1a
    2c54:	ab 8f       	std	Y+27, r26	; 0x1b
    2c56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a ef       	ldi	r20, 0xFA	; 250
    2c66:	54 e4       	ldi	r21, 0x44	; 68
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8d 8b       	std	Y+21, r24	; 0x15
    2c72:	9e 8b       	std	Y+22, r25	; 0x16
    2c74:	af 8b       	std	Y+23, r26	; 0x17
    2c76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9c 8b       	std	Y+20, r25	; 0x14
    2c96:	8b 8b       	std	Y+19, r24	; 0x13
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9c 8b       	std	Y+20, r25	; 0x14
    2cd8:	8b 8b       	std	Y+19, r24	; 0x13
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <LCD_displayCharacter+0x2ac>
    2cdc:	88 ec       	ldi	r24, 0xC8	; 200
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9a 8b       	std	Y+18, r25	; 0x12
    2ce2:	89 8b       	std	Y+17, r24	; 0x11
    2ce4:	89 89       	ldd	r24, Y+17	; 0x11
    2ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <LCD_displayCharacter+0x29a>
    2cec:	9a 8b       	std	Y+18, r25	; 0x12
    2cee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9c 8b       	std	Y+20, r25	; 0x14
    2cf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <LCD_displayCharacter+0x28e>
    2d02:	14 c0       	rjmp	.+40     	; 0x2d2c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	6d 89       	ldd	r22, Y+21	; 0x15
    2d06:	7e 89       	ldd	r23, Y+22	; 0x16
    2d08:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9c 8b       	std	Y+20, r25	; 0x14
    2d16:	8b 8b       	std	Y+19, r24	; 0x13
    2d18:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1c:	98 8b       	std	Y+16, r25	; 0x10
    2d1e:	8f 87       	std	Y+15, r24	; 0x0f
    2d20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d22:	98 89       	ldd	r25, Y+16	; 0x10
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <LCD_displayCharacter+0x2d6>
    2d28:	98 8b       	std	Y+16, r25	; 0x10
    2d2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	67 e0       	ldi	r22, 0x07	; 7
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <GPIO_writePin>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e8       	ldi	r26, 0x80	; 128
    2d3c:	bf e3       	ldi	r27, 0x3F	; 63
    2d3e:	8b 87       	std	Y+11, r24	; 0x0b
    2d40:	9c 87       	std	Y+12, r25	; 0x0c
    2d42:	ad 87       	std	Y+13, r26	; 0x0d
    2d44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	4a ef       	ldi	r20, 0xFA	; 250
    2d54:	54 e4       	ldi	r21, 0x44	; 68
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	8f 83       	std	Y+7, r24	; 0x07
    2d60:	98 87       	std	Y+8, r25	; 0x08
    2d62:	a9 87       	std	Y+9, r26	; 0x09
    2d64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	2c f4       	brge	.+10     	; 0x2d88 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	3f c0       	rjmp	.+126    	; 0x2e06 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2d88:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8a:	78 85       	ldd	r23, Y+8	; 0x08
    2d8c:	89 85       	ldd	r24, Y+9	; 0x09
    2d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	4f e7       	ldi	r20, 0x7F	; 127
    2d96:	57 e4       	ldi	r21, 0x47	; 71
    2d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d9c:	18 16       	cp	r1, r24
    2d9e:	4c f5       	brge	.+82     	; 0x2df2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	0f c0       	rjmp	.+30     	; 0x2de8 <LCD_displayCharacter+0x39a>
    2dca:	88 ec       	ldi	r24, 0xC8	; 200
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9c 83       	std	Y+4, r25	; 0x04
    2dd0:	8b 83       	std	Y+3, r24	; 0x03
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_displayCharacter+0x388>
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f7       	brne	.-38     	; 0x2dca <LCD_displayCharacter+0x37c>
    2df0:	14 c0       	rjmp	.+40     	; 0x2e1a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <LCD_displayCharacter+0x3c4>
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e1a:	e9 96       	adiw	r28, 0x39	; 57
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <LCD_displayString+0x6>
    2e32:	0f 92       	push	r0
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	9b 83       	std	Y+3, r25	; 0x03
    2e3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e3c:	19 82       	std	Y+1, r1	; 0x01
    2e3e:	0e c0       	rjmp	.+28     	; 0x2e5c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	e2 0f       	add	r30, r18
    2e4e:	f3 1f       	adc	r31, r19
    2e50:	80 81       	ld	r24, Z
    2e52:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_displayCharacter>
		i++;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	fc 01       	movw	r30, r24
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	80 81       	ld	r24, Z
    2e6e:	88 23       	and	r24, r24
    2e70:	39 f7       	brne	.-50     	; 0x2e40 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	00 d0       	rcall	.+0      	; 0x2e84 <LCD_moveCursor+0x6>
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <LCD_moveCursor+0x8>
    2e86:	0f 92       	push	r0
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	8a 83       	std	Y+2, r24	; 0x02
    2e8e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	3d 83       	std	Y+5, r19	; 0x05
    2e98:	2c 83       	std	Y+4, r18	; 0x04
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	c1 f0       	breq	.+48     	; 0x2ed4 <LCD_moveCursor+0x56>
    2ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <LCD_moveCursor+0x3a>
    2eae:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	61 f0       	breq	.+24     	; 0x2ece <LCD_moveCursor+0x50>
    2eb6:	19 c0       	rjmp	.+50     	; 0x2eea <LCD_moveCursor+0x6c>
    2eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eba:	3d 81       	ldd	r19, Y+5	; 0x05
    2ebc:	22 30       	cpi	r18, 0x02	; 2
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	69 f0       	breq	.+26     	; 0x2edc <LCD_moveCursor+0x5e>
    2ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec6:	83 30       	cpi	r24, 0x03	; 3
    2ec8:	91 05       	cpc	r25, r1
    2eca:	61 f0       	breq	.+24     	; 0x2ee4 <LCD_moveCursor+0x66>
    2ecc:	0e c0       	rjmp	.+28     	; 0x2eea <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	0b c0       	rjmp	.+22     	; 0x2eea <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	80 5c       	subi	r24, 0xC0	; 192
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	07 c0       	rjmp	.+14     	; 0x2eea <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	80 5f       	subi	r24, 0xF0	; 240
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	03 c0       	rjmp	.+6      	; 0x2eea <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	80 5b       	subi	r24, 0xB0	; 176
    2ee8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	80 68       	ori	r24, 0x80	; 128
    2eee:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_sendCommand>
}
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <LCD_displayStringRowColumn+0x6>
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <LCD_displayStringRowColumn+0x8>
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	6a 83       	std	Y+2, r22	; 0x02
    2f12:	5c 83       	std	Y+4, r21	; 0x04
    2f14:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	6a 81       	ldd	r22, Y+2	; 0x02
    2f1a:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
}
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	62 97       	sbiw	r28, 0x12	; 18
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	9a 8b       	std	Y+18, r25	; 0x12
    2f4a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f4c:	89 89       	ldd	r24, Y+17	; 0x11
    2f4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f50:	9e 01       	movw	r18, r28
    2f52:	2f 5f       	subi	r18, 0xFF	; 255
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	b9 01       	movw	r22, r18
    2f58:	4a e0       	ldi	r20, 0x0A	; 10
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	0e 94 34 19 	call	0x3268	; 0x3268 <itoa>
   LCD_displayString(buff); /* Display the string */
    2f60:	ce 01       	movw	r24, r28
    2f62:	01 96       	adiw	r24, 0x01	; 1
    2f64:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayString>
}
    2f68:	62 96       	adiw	r28, 0x12	; 18
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_sendCommand>
}
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType * Config_Ptr)
{
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	00 d0       	rcall	.+0      	; 0x2f94 <UART_init+0x6>
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <UART_init+0x8>
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	9c 83       	std	Y+4, r25	; 0x04
    2f9c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f9e:	1a 82       	std	Y+2, r1	; 0x02
    2fa0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2fa2:	eb e2       	ldi	r30, 0x2B	; 43
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	82 e0       	ldi	r24, 0x02	; 2
    2fa8:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable

	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2faa:	ea e2       	ldi	r30, 0x2A	; 42
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	88 e1       	ldi	r24, 0x18	; 24
    2fb0:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	if((Config_Ptr->bit_data)==BIT_9)
    2fb2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb6:	80 81       	ld	r24, Z
    2fb8:	87 30       	cpi	r24, 0x07	; 7
    2fba:	61 f4       	brne	.+24     	; 0x2fd4 <UART_init+0x46>
	{
		/* ENABLE THE BIT OF 9_BIT MODE
		 * AND RX , TX ARE ENABLED*/
		Config_Ptr->bit_data=3;
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	83 e0       	ldi	r24, 0x03	; 3
    2fc2:	80 83       	st	Z, r24
		UCSRB|=(1<<UCSZ2);
    2fc4:	aa e2       	ldi	r26, 0x2A	; 42
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	ea e2       	ldi	r30, 0x2A	; 42
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	84 60       	ori	r24, 0x04	; 4
    2fd0:	8c 93       	st	X, r24
    2fd2:	07 c0       	rjmp	.+14     	; 0x2fe2 <UART_init+0x54>
	}
	else
	{
		/*ONLY PUT ZERO IN BIT UCSZ2 */
		UCSRB&=~(1<<UCSZ2);
    2fd4:	aa e2       	ldi	r26, 0x2A	; 42
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ea e2       	ldi	r30, 0x2A	; 42
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8b 7f       	andi	r24, 0xFB	; 251
    2fe0:	8c 93       	st	X, r24
	}
	
	UCSRC = (1<<URSEL) |((Config_Ptr->bit_data)<<1)|((Config_Ptr->parity)<<4)|((Config_Ptr->stop_bit)<<3);
    2fe2:	a0 e4       	ldi	r26, 0x40	; 64
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fea:	80 81       	ld	r24, Z
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	20 68       	ori	r18, 0x80	; 128
    2ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    2ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffc:	81 81       	ldd	r24, Z+1	; 0x01
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	82 95       	swap	r24
    3004:	92 95       	swap	r25
    3006:	90 7f       	andi	r25, 0xF0	; 240
    3008:	98 27       	eor	r25, r24
    300a:	80 7f       	andi	r24, 0xF0	; 240
    300c:	98 27       	eor	r25, r24
    300e:	28 2b       	or	r18, r24
    3010:	eb 81       	ldd	r30, Y+3	; 0x03
    3012:	fc 81       	ldd	r31, Y+4	; 0x04
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	82 2b       	or	r24, r18
    3028:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate)* 8UL))) - 1);
    302a:	eb 81       	ldd	r30, Y+3	; 0x03
    302c:	fc 81       	ldd	r31, Y+4	; 0x04
    302e:	83 81       	ldd	r24, Z+3	; 0x03
    3030:	94 81       	ldd	r25, Z+4	; 0x04
    3032:	cc 01       	movw	r24, r24
    3034:	a0 e0       	ldi	r26, 0x00	; 0
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	aa 1f       	adc	r26, r26
    303e:	bb 1f       	adc	r27, r27
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	aa 1f       	adc	r26, r26
    3046:	bb 1f       	adc	r27, r27
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	aa 1f       	adc	r26, r26
    304e:	bb 1f       	adc	r27, r27
    3050:	9c 01       	movw	r18, r24
    3052:	ad 01       	movw	r20, r26
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	92 e1       	ldi	r25, 0x12	; 18
    3058:	aa e7       	ldi	r26, 0x7A	; 122
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	bc 01       	movw	r22, r24
    305e:	cd 01       	movw	r24, r26
    3060:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__udivmodsi4>
    3064:	da 01       	movw	r26, r20
    3066:	c9 01       	movw	r24, r18
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    306e:	e0 e4       	ldi	r30, 0x40	; 64
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	9a 81       	ldd	r25, Y+2	; 0x02
    3076:	89 2f       	mov	r24, r25
    3078:	99 27       	eor	r25, r25
    307a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    307c:	e9 e2       	ldi	r30, 0x29	; 41
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	80 83       	st	Z, r24
}
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	0f 92       	push	r0
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    309e:	eb e2       	ldi	r30, 0x2B	; 43
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	80 72       	andi	r24, 0x20	; 32
    30aa:	90 70       	andi	r25, 0x00	; 0
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	b9 f3       	breq	.-18     	; 0x309e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    30b0:	ec e2       	ldi	r30, 0x2C	; 44
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    30b8:	0f 90       	pop	r0
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    30c8:	eb e2       	ldi	r30, 0x2B	; 43
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	88 23       	and	r24, r24
    30d0:	dc f7       	brge	.-10     	; 0x30c8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    30d2:	ec e2       	ldi	r30, 0x2C	; 44
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
}
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <UART_sendString+0x6>
    30e4:	0f 92       	push	r0
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	9b 83       	std	Y+3, r25	; 0x03
    30ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30ee:	19 82       	std	Y+1, r1	; 0x01
    30f0:	0e c0       	rjmp	.+28     	; 0x310e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	28 2f       	mov	r18, r24
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	9b 81       	ldd	r25, Y+3	; 0x03
    30fc:	fc 01       	movw	r30, r24
    30fe:	e2 0f       	add	r30, r18
    3100:	f3 1f       	adc	r31, r19
    3102:	80 81       	ld	r24, Z
    3104:	0e 94 49 18 	call	0x3092	; 0x3092 <UART_sendByte>
		i++;
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	8f 5f       	subi	r24, 0xFF	; 255
    310c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    310e:	89 81       	ldd	r24, Y+1	; 0x01
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	9b 81       	ldd	r25, Y+3	; 0x03
    3118:	fc 01       	movw	r30, r24
    311a:	e2 0f       	add	r30, r18
    311c:	f3 1f       	adc	r31, r19
    311e:	80 81       	ld	r24, Z
    3120:	88 23       	and	r24, r24
    3122:	39 f7       	brne	.-50     	; 0x30f2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	00 d0       	rcall	.+0      	; 0x313a <UART_receiveString+0xa>
    313a:	0f 92       	push	r0
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	9b 83       	std	Y+3, r25	; 0x03
    3142:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3144:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	9b 81       	ldd	r25, Y+3	; 0x03
    3150:	8c 01       	movw	r16, r24
    3152:	02 0f       	add	r16, r18
    3154:	13 1f       	adc	r17, r19
    3156:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
    315a:	f8 01       	movw	r30, r16
    315c:	80 83       	st	Z, r24
    315e:	0f c0       	rjmp	.+30     	; 0x317e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	8f 5f       	subi	r24, 0xFF	; 255
    3164:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	8c 01       	movw	r16, r24
    3172:	02 0f       	add	r16, r18
    3174:	13 1f       	adc	r17, r19
    3176:	0e 94 60 18 	call	0x30c0	; 0x30c0 <UART_recieveByte>
    317a:	f8 01       	movw	r30, r16
    317c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	9b 81       	ldd	r25, Y+3	; 0x03
    3188:	fc 01       	movw	r30, r24
    318a:	e2 0f       	add	r30, r18
    318c:	f3 1f       	adc	r31, r19
    318e:	80 81       	ld	r24, Z
    3190:	83 32       	cpi	r24, 0x23	; 35
    3192:	31 f7       	brne	.-52     	; 0x3160 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	9b 81       	ldd	r25, Y+3	; 0x03
    319e:	fc 01       	movw	r30, r24
    31a0:	e2 0f       	add	r30, r18
    31a2:	f3 1f       	adc	r31, r19
    31a4:	10 82       	st	Z, r1
}
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	08 95       	ret

000031b6 <__udivmodsi4>:
    31b6:	a1 e2       	ldi	r26, 0x21	; 33
    31b8:	1a 2e       	mov	r1, r26
    31ba:	aa 1b       	sub	r26, r26
    31bc:	bb 1b       	sub	r27, r27
    31be:	fd 01       	movw	r30, r26
    31c0:	0d c0       	rjmp	.+26     	; 0x31dc <__udivmodsi4_ep>

000031c2 <__udivmodsi4_loop>:
    31c2:	aa 1f       	adc	r26, r26
    31c4:	bb 1f       	adc	r27, r27
    31c6:	ee 1f       	adc	r30, r30
    31c8:	ff 1f       	adc	r31, r31
    31ca:	a2 17       	cp	r26, r18
    31cc:	b3 07       	cpc	r27, r19
    31ce:	e4 07       	cpc	r30, r20
    31d0:	f5 07       	cpc	r31, r21
    31d2:	20 f0       	brcs	.+8      	; 0x31dc <__udivmodsi4_ep>
    31d4:	a2 1b       	sub	r26, r18
    31d6:	b3 0b       	sbc	r27, r19
    31d8:	e4 0b       	sbc	r30, r20
    31da:	f5 0b       	sbc	r31, r21

000031dc <__udivmodsi4_ep>:
    31dc:	66 1f       	adc	r22, r22
    31de:	77 1f       	adc	r23, r23
    31e0:	88 1f       	adc	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	1a 94       	dec	r1
    31e6:	69 f7       	brne	.-38     	; 0x31c2 <__udivmodsi4_loop>
    31e8:	60 95       	com	r22
    31ea:	70 95       	com	r23
    31ec:	80 95       	com	r24
    31ee:	90 95       	com	r25
    31f0:	9b 01       	movw	r18, r22
    31f2:	ac 01       	movw	r20, r24
    31f4:	bd 01       	movw	r22, r26
    31f6:	cf 01       	movw	r24, r30
    31f8:	08 95       	ret

000031fa <__prologue_saves__>:
    31fa:	2f 92       	push	r2
    31fc:	3f 92       	push	r3
    31fe:	4f 92       	push	r4
    3200:	5f 92       	push	r5
    3202:	6f 92       	push	r6
    3204:	7f 92       	push	r7
    3206:	8f 92       	push	r8
    3208:	9f 92       	push	r9
    320a:	af 92       	push	r10
    320c:	bf 92       	push	r11
    320e:	cf 92       	push	r12
    3210:	df 92       	push	r13
    3212:	ef 92       	push	r14
    3214:	ff 92       	push	r15
    3216:	0f 93       	push	r16
    3218:	1f 93       	push	r17
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    3222:	ca 1b       	sub	r28, r26
    3224:	db 0b       	sbc	r29, r27
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	09 94       	ijmp

00003232 <__epilogue_restores__>:
    3232:	2a 88       	ldd	r2, Y+18	; 0x12
    3234:	39 88       	ldd	r3, Y+17	; 0x11
    3236:	48 88       	ldd	r4, Y+16	; 0x10
    3238:	5f 84       	ldd	r5, Y+15	; 0x0f
    323a:	6e 84       	ldd	r6, Y+14	; 0x0e
    323c:	7d 84       	ldd	r7, Y+13	; 0x0d
    323e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3240:	9b 84       	ldd	r9, Y+11	; 0x0b
    3242:	aa 84       	ldd	r10, Y+10	; 0x0a
    3244:	b9 84       	ldd	r11, Y+9	; 0x09
    3246:	c8 84       	ldd	r12, Y+8	; 0x08
    3248:	df 80       	ldd	r13, Y+7	; 0x07
    324a:	ee 80       	ldd	r14, Y+6	; 0x06
    324c:	fd 80       	ldd	r15, Y+5	; 0x05
    324e:	0c 81       	ldd	r16, Y+4	; 0x04
    3250:	1b 81       	ldd	r17, Y+3	; 0x03
    3252:	aa 81       	ldd	r26, Y+2	; 0x02
    3254:	b9 81       	ldd	r27, Y+1	; 0x01
    3256:	ce 0f       	add	r28, r30
    3258:	d1 1d       	adc	r29, r1
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	f8 94       	cli
    325e:	de bf       	out	0x3e, r29	; 62
    3260:	0f be       	out	0x3f, r0	; 63
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	ed 01       	movw	r28, r26
    3266:	08 95       	ret

00003268 <itoa>:
    3268:	fb 01       	movw	r30, r22
    326a:	9f 01       	movw	r18, r30
    326c:	e8 94       	clt
    326e:	42 30       	cpi	r20, 0x02	; 2
    3270:	c4 f0       	brlt	.+48     	; 0x32a2 <itoa+0x3a>
    3272:	45 32       	cpi	r20, 0x25	; 37
    3274:	b4 f4       	brge	.+44     	; 0x32a2 <itoa+0x3a>
    3276:	4a 30       	cpi	r20, 0x0A	; 10
    3278:	29 f4       	brne	.+10     	; 0x3284 <itoa+0x1c>
    327a:	97 fb       	bst	r25, 7
    327c:	1e f4       	brtc	.+6      	; 0x3284 <itoa+0x1c>
    327e:	90 95       	com	r25
    3280:	81 95       	neg	r24
    3282:	9f 4f       	sbci	r25, 0xFF	; 255
    3284:	64 2f       	mov	r22, r20
    3286:	77 27       	eor	r23, r23
    3288:	0e 94 65 19 	call	0x32ca	; 0x32ca <__udivmodhi4>
    328c:	80 5d       	subi	r24, 0xD0	; 208
    328e:	8a 33       	cpi	r24, 0x3A	; 58
    3290:	0c f0       	brlt	.+2      	; 0x3294 <itoa+0x2c>
    3292:	89 5d       	subi	r24, 0xD9	; 217
    3294:	81 93       	st	Z+, r24
    3296:	cb 01       	movw	r24, r22
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	a1 f7       	brne	.-24     	; 0x3284 <itoa+0x1c>
    329c:	16 f4       	brtc	.+4      	; 0x32a2 <itoa+0x3a>
    329e:	5d e2       	ldi	r21, 0x2D	; 45
    32a0:	51 93       	st	Z+, r21
    32a2:	10 82       	st	Z, r1
    32a4:	c9 01       	movw	r24, r18
    32a6:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <strrev>

000032aa <strrev>:
    32aa:	dc 01       	movw	r26, r24
    32ac:	fc 01       	movw	r30, r24
    32ae:	67 2f       	mov	r22, r23
    32b0:	71 91       	ld	r23, Z+
    32b2:	77 23       	and	r23, r23
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <strrev+0x4>
    32b6:	32 97       	sbiw	r30, 0x02	; 2
    32b8:	04 c0       	rjmp	.+8      	; 0x32c2 <strrev+0x18>
    32ba:	7c 91       	ld	r23, X
    32bc:	6d 93       	st	X+, r22
    32be:	70 83       	st	Z, r23
    32c0:	62 91       	ld	r22, -Z
    32c2:	ae 17       	cp	r26, r30
    32c4:	bf 07       	cpc	r27, r31
    32c6:	c8 f3       	brcs	.-14     	; 0x32ba <strrev+0x10>
    32c8:	08 95       	ret

000032ca <__udivmodhi4>:
    32ca:	aa 1b       	sub	r26, r26
    32cc:	bb 1b       	sub	r27, r27
    32ce:	51 e1       	ldi	r21, 0x11	; 17
    32d0:	07 c0       	rjmp	.+14     	; 0x32e0 <__udivmodhi4_ep>

000032d2 <__udivmodhi4_loop>:
    32d2:	aa 1f       	adc	r26, r26
    32d4:	bb 1f       	adc	r27, r27
    32d6:	a6 17       	cp	r26, r22
    32d8:	b7 07       	cpc	r27, r23
    32da:	10 f0       	brcs	.+4      	; 0x32e0 <__udivmodhi4_ep>
    32dc:	a6 1b       	sub	r26, r22
    32de:	b7 0b       	sbc	r27, r23

000032e0 <__udivmodhi4_ep>:
    32e0:	88 1f       	adc	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	5a 95       	dec	r21
    32e6:	a9 f7       	brne	.-22     	; 0x32d2 <__udivmodhi4_loop>
    32e8:	80 95       	com	r24
    32ea:	90 95       	com	r25
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	08 95       	ret

000032f2 <_exit>:
    32f2:	f8 94       	cli

000032f4 <__stop_program>:
    32f4:	ff cf       	rjmp	.-2      	; 0x32f4 <__stop_program>
